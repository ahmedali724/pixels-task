
ICU_UART_MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000205c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  0000205c  000020d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001b48  00000000  00000000  000020f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000018c2  00000000  00000000  00003c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000054fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000563e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000057ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000073f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000082e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009090  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  000091f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000947d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009c4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e5       	ldi	r30, 0x5C	; 92
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <main>
      7a:	0c 94 2c 10 	jmp	0x2058	; 0x2058 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 b0 0f 	jmp	0x1f60	; 0x1f60 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a3 e7       	ldi	r26, 0x73	; 115
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 cc 0f 	jmp	0x1f98	; 0x1f98 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 bc 0f 	jmp	0x1f78	; 0x1f78 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 d8 0f 	jmp	0x1fb0	; 0x1fb0 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 bc 0f 	jmp	0x1f78	; 0x1f78 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 d8 0f 	jmp	0x1fb0	; 0x1fb0 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 b0 0f 	jmp	0x1f60	; 0x1f60 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	83 e7       	ldi	r24, 0x73	; 115
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 cc 0f 	jmp	0x1f98	; 0x1f98 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 bc 0f 	jmp	0x1f78	; 0x1f78 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 d8 0f 	jmp	0x1fb0	; 0x1fb0 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 bc 0f 	jmp	0x1f78	; 0x1f78 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 d8 0f 	jmp	0x1fb0	; 0x1fb0 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 bc 0f 	jmp	0x1f78	; 0x1f78 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 d8 0f 	jmp	0x1fb0	; 0x1fb0 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 c0 0f 	jmp	0x1f80	; 0x1f80 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 dc 0f 	jmp	0x1fb8	; 0x1fb8 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *Config_Ptr)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <UART_init+0x6>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <UART_init+0x8>
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	9c 83       	std	Y+4, r25	; 0x04
     b44:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
     b46:	1a 82       	std	Y+2, r1	; 0x02
     b48:	19 82       	std	Y+1, r1	; 0x01
	/* U2X = 1 for double transmission speed */
	UCSRA_REG.Bits.U2X_Bit = 1;
     b4a:	eb e2       	ldi	r30, 0x2B	; 43
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	80 81       	ld	r24, Z
     b50:	82 60       	ori	r24, 0x02	; 2
     b52:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB_REG.Bits.TXEN_Bit = 1;
     b54:	ea e2       	ldi	r30, 0x2A	; 42
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	80 81       	ld	r24, Z
     b5a:	88 60       	ori	r24, 0x08	; 8
     b5c:	80 83       	st	Z, r24
	UCSRB_REG.Bits.RXEN_Bit = 1;
     b5e:	ea e2       	ldi	r30, 0x2A	; 42
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	80 61       	ori	r24, 0x10	; 16
     b66:	80 83       	st	Z, r24

	/************************** UCSRC Description **************************
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC_REG.Bits.URSEL_Bit = 1;
     b68:	e0 e4       	ldi	r30, 0x40	; 64
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 81       	ld	r24, Z
     b6e:	80 68       	ori	r24, 0x80	; 128
     b70:	80 83       	st	Z, r24
	UCSRC_REG.Bits.UCPOL_Bit = 0;
     b72:	e0 e4       	ldi	r30, 0x40	; 64
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	80 81       	ld	r24, Z
     b78:	8e 7f       	andi	r24, 0xFE	; 254
     b7a:	80 83       	st	Z, r24

	/*
	 * insert the required mode in UMSEL bit of UCSRC Register
	 */
	UCSRC_REG.Bits.UMSEL_Bit = Config_Ptr->mode;
     b7c:	a0 e4       	ldi	r26, 0x40	; 64
     b7e:	b0 e0       	ldi	r27, 0x00	; 0
     b80:	eb 81       	ldd	r30, Y+3	; 0x03
     b82:	fc 81       	ldd	r31, Y+4	; 0x04
     b84:	80 81       	ld	r24, Z
     b86:	81 70       	andi	r24, 0x01	; 1
     b88:	81 70       	andi	r24, 0x01	; 1
     b8a:	98 2f       	mov	r25, r24
     b8c:	92 95       	swap	r25
     b8e:	99 0f       	add	r25, r25
     b90:	99 0f       	add	r25, r25
     b92:	90 7c       	andi	r25, 0xC0	; 192
     b94:	8c 91       	ld	r24, X
     b96:	8f 7b       	andi	r24, 0xBF	; 191
     b98:	89 2b       	or	r24, r25
     b9a:	8c 93       	st	X, r24

	/*
	 * insert the required parity mode in UPM1 bit (UPM0 and UPM1) of UCSRC Register
	 */
	UCSRC_REG.Byte = (UCSRC_REG.Byte & 0xCF) | ((Config_Ptr->parity) << 4);
     b9c:	a0 e4       	ldi	r26, 0x40	; 64
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	e0 e4       	ldi	r30, 0x40	; 64
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	28 2f       	mov	r18, r24
     ba8:	2f 7c       	andi	r18, 0xCF	; 207
     baa:	eb 81       	ldd	r30, Y+3	; 0x03
     bac:	fc 81       	ldd	r31, Y+4	; 0x04
     bae:	81 81       	ldd	r24, Z+1	; 0x01
     bb0:	88 2f       	mov	r24, r24
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	82 95       	swap	r24
     bb6:	92 95       	swap	r25
     bb8:	90 7f       	andi	r25, 0xF0	; 240
     bba:	98 27       	eor	r25, r24
     bbc:	80 7f       	andi	r24, 0xF0	; 240
     bbe:	98 27       	eor	r25, r24
     bc0:	82 2b       	or	r24, r18
     bc2:	8c 93       	st	X, r24

	/*
	 * insert the required stop bit in USBS bit of UCSRC Register
	 */
	UCSRC_REG.Bits.USBS_Bit = Config_Ptr->stopBit;
     bc4:	a0 e4       	ldi	r26, 0x40	; 64
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
     bc8:	eb 81       	ldd	r30, Y+3	; 0x03
     bca:	fc 81       	ldd	r31, Y+4	; 0x04
     bcc:	82 81       	ldd	r24, Z+2	; 0x02
     bce:	81 70       	andi	r24, 0x01	; 1
     bd0:	81 70       	andi	r24, 0x01	; 1
     bd2:	98 2f       	mov	r25, r24
     bd4:	99 0f       	add	r25, r25
     bd6:	99 0f       	add	r25, r25
     bd8:	99 0f       	add	r25, r25
     bda:	8c 91       	ld	r24, X
     bdc:	87 7f       	andi	r24, 0xF7	; 247
     bde:	89 2b       	or	r24, r25
     be0:	8c 93       	st	X, r24

	/*
	 * insert the required character size in UCSZ bits(UCSZ0, UCSZ1 and UCSZ2) of UCSRC and UCSRB Register
	 */
	UCSRC_REG.Byte = (UCSRC_REG.Byte & 0xF9)
     be2:	a0 e4       	ldi	r26, 0x40	; 64
     be4:	b0 e0       	ldi	r27, 0x00	; 0
     be6:	e0 e4       	ldi	r30, 0x40	; 64
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	28 2f       	mov	r18, r24
     bee:	29 7f       	andi	r18, 0xF9	; 249
     bf0:	eb 81       	ldd	r30, Y+3	; 0x03
     bf2:	fc 81       	ldd	r31, Y+4	; 0x04
     bf4:	83 81       	ldd	r24, Z+3	; 0x03
     bf6:	88 2f       	mov	r24, r24
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	88 0f       	add	r24, r24
     bfc:	99 1f       	adc	r25, r25
     bfe:	86 70       	andi	r24, 0x06	; 6
     c00:	82 2b       	or	r24, r18
     c02:	8c 93       	st	X, r24
			| (((Config_Ptr->characterSize) << 1) & 0x06);

	/* Calculate the UBRR register value */
	ubrr_value = (uint16) (((F_CPU / ((Config_Ptr->baudRate) * 8UL))) - 1);
     c04:	eb 81       	ldd	r30, Y+3	; 0x03
     c06:	fc 81       	ldd	r31, Y+4	; 0x04
     c08:	84 81       	ldd	r24, Z+4	; 0x04
     c0a:	95 81       	ldd	r25, Z+5	; 0x05
     c0c:	a6 81       	ldd	r26, Z+6	; 0x06
     c0e:	b7 81       	ldd	r27, Z+7	; 0x07
     c10:	88 0f       	add	r24, r24
     c12:	99 1f       	adc	r25, r25
     c14:	aa 1f       	adc	r26, r26
     c16:	bb 1f       	adc	r27, r27
     c18:	88 0f       	add	r24, r24
     c1a:	99 1f       	adc	r25, r25
     c1c:	aa 1f       	adc	r26, r26
     c1e:	bb 1f       	adc	r27, r27
     c20:	88 0f       	add	r24, r24
     c22:	99 1f       	adc	r25, r25
     c24:	aa 1f       	adc	r26, r26
     c26:	bb 1f       	adc	r27, r27
     c28:	9c 01       	movw	r18, r24
     c2a:	ad 01       	movw	r20, r26
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	94 e2       	ldi	r25, 0x24	; 36
     c30:	a4 ef       	ldi	r26, 0xF4	; 244
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	bc 01       	movw	r22, r24
     c36:	cd 01       	movw	r24, r26
     c38:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <__udivmodsi4>
     c3c:	da 01       	movw	r26, r20
     c3e:	c9 01       	movw	r24, r18
     c40:	01 97       	sbiw	r24, 0x01	; 1
     c42:	9a 83       	std	Y+2, r25	; 0x02
     c44:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH_REG = ubrr_value >> 8;
     c46:	e0 e4       	ldi	r30, 0x40	; 64
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	89 81       	ldd	r24, Y+1	; 0x01
     c4c:	9a 81       	ldd	r25, Y+2	; 0x02
     c4e:	89 2f       	mov	r24, r25
     c50:	99 27       	eor	r25, r25
     c52:	80 83       	st	Z, r24
	UBRRL_REG = ubrr_value;
     c54:	e9 e2       	ldi	r30, 0x29	; 41
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	89 81       	ldd	r24, Y+1	; 0x01
     c5a:	80 83       	st	Z, r24
}
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
     c62:	0f 90       	pop	r0
     c64:	cf 91       	pop	r28
     c66:	df 91       	pop	r29
     c68:	08 95       	ret

00000c6a <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
     c6a:	df 93       	push	r29
     c6c:	cf 93       	push	r28
     c6e:	0f 92       	push	r0
     c70:	cd b7       	in	r28, 0x3d	; 61
     c72:	de b7       	in	r29, 0x3e	; 62
     c74:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while (UCSRA_REG.Bits.UDRE_Bit == 0)
     c76:	eb e2       	ldi	r30, 0x2B	; 43
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	80 72       	andi	r24, 0x20	; 32
     c7e:	88 23       	and	r24, r24
     c80:	d1 f3       	breq	.-12     	; 0xc76 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR_REG = data;
     c82:	ec e2       	ldi	r30, 0x2C	; 44
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	89 81       	ldd	r24, Y+1	; 0x01
     c88:	80 83       	st	Z, r24
}
     c8a:	0f 90       	pop	r0
     c8c:	cf 91       	pop	r28
     c8e:	df 91       	pop	r29
     c90:	08 95       	ret

00000c92 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
     c92:	df 93       	push	r29
     c94:	cf 93       	push	r28
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while (UCSRA_REG.Bits.RXC_Bit == 0)
     c9a:	eb e2       	ldi	r30, 0x2B	; 43
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	80 78       	andi	r24, 0x80	; 128
     ca2:	88 23       	and	r24, r24
     ca4:	d1 f3       	breq	.-12     	; 0xc9a <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR_REG;
     ca6:	ec e2       	ldi	r30, 0x2C	; 44
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
}
     cac:	cf 91       	pop	r28
     cae:	df 91       	pop	r29
     cb0:	08 95       	ret

00000cb2 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
     cb2:	df 93       	push	r29
     cb4:	cf 93       	push	r28
     cb6:	00 d0       	rcall	.+0      	; 0xcb8 <UART_sendString+0x6>
     cb8:	0f 92       	push	r0
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
     cbe:	9b 83       	std	Y+3, r25	; 0x03
     cc0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     cc2:	19 82       	std	Y+1, r1	; 0x01
     cc4:	0e c0       	rjmp	.+28     	; 0xce2 <UART_sendString+0x30>

	/* Send the whole string */
	while (Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	28 2f       	mov	r18, r24
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	8a 81       	ldd	r24, Y+2	; 0x02
     cce:	9b 81       	ldd	r25, Y+3	; 0x03
     cd0:	fc 01       	movw	r30, r24
     cd2:	e2 0f       	add	r30, r18
     cd4:	f3 1f       	adc	r31, r19
     cd6:	80 81       	ld	r24, Z
     cd8:	0e 94 35 06 	call	0xc6a	; 0xc6a <UART_sendByte>
		i++;
     cdc:	89 81       	ldd	r24, Y+1	; 0x01
     cde:	8f 5f       	subi	r24, 0xFF	; 255
     ce0:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while (Str[i] != '\0')
     ce2:	89 81       	ldd	r24, Y+1	; 0x01
     ce4:	28 2f       	mov	r18, r24
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	8a 81       	ldd	r24, Y+2	; 0x02
     cea:	9b 81       	ldd	r25, Y+3	; 0x03
     cec:	fc 01       	movw	r30, r24
     cee:	e2 0f       	add	r30, r18
     cf0:	f3 1f       	adc	r31, r19
     cf2:	80 81       	ld	r24, Z
     cf4:	88 23       	and	r24, r24
     cf6:	39 f7       	brne	.-50     	; 0xcc6 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
     cf8:	0f 90       	pop	r0
     cfa:	0f 90       	pop	r0
     cfc:	0f 90       	pop	r0
     cfe:	cf 91       	pop	r28
     d00:	df 91       	pop	r29
     d02:	08 95       	ret

00000d04 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
     d04:	0f 93       	push	r16
     d06:	1f 93       	push	r17
     d08:	df 93       	push	r29
     d0a:	cf 93       	push	r28
     d0c:	00 d0       	rcall	.+0      	; 0xd0e <UART_receiveString+0xa>
     d0e:	0f 92       	push	r0
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
     d14:	9b 83       	std	Y+3, r25	; 0x03
     d16:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     d18:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
     d1a:	89 81       	ldd	r24, Y+1	; 0x01
     d1c:	28 2f       	mov	r18, r24
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	8a 81       	ldd	r24, Y+2	; 0x02
     d22:	9b 81       	ldd	r25, Y+3	; 0x03
     d24:	8c 01       	movw	r16, r24
     d26:	02 0f       	add	r16, r18
     d28:	13 1f       	adc	r17, r19
     d2a:	0e 94 49 06 	call	0xc92	; 0xc92 <UART_recieveByte>
     d2e:	f8 01       	movw	r30, r16
     d30:	80 83       	st	Z, r24
     d32:	0f c0       	rjmp	.+30     	; 0xd52 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while (Str[i] != '#')
	{
		i++;
     d34:	89 81       	ldd	r24, Y+1	; 0x01
     d36:	8f 5f       	subi	r24, 0xFF	; 255
     d38:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	28 2f       	mov	r18, r24
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	8a 81       	ldd	r24, Y+2	; 0x02
     d42:	9b 81       	ldd	r25, Y+3	; 0x03
     d44:	8c 01       	movw	r16, r24
     d46:	02 0f       	add	r16, r18
     d48:	13 1f       	adc	r17, r19
     d4a:	0e 94 49 06 	call	0xc92	; 0xc92 <UART_recieveByte>
     d4e:	f8 01       	movw	r30, r16
     d50:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while (Str[i] != '#')
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	28 2f       	mov	r18, r24
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	8a 81       	ldd	r24, Y+2	; 0x02
     d5a:	9b 81       	ldd	r25, Y+3	; 0x03
     d5c:	fc 01       	movw	r30, r24
     d5e:	e2 0f       	add	r30, r18
     d60:	f3 1f       	adc	r31, r19
     d62:	80 81       	ld	r24, Z
     d64:	83 32       	cpi	r24, 0x23	; 35
     d66:	31 f7       	brne	.-52     	; 0xd34 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	8a 81       	ldd	r24, Y+2	; 0x02
     d70:	9b 81       	ldd	r25, Y+3	; 0x03
     d72:	fc 01       	movw	r30, r24
     d74:	e2 0f       	add	r30, r18
     d76:	f3 1f       	adc	r31, r19
     d78:	10 82       	st	Z, r1
}
     d7a:	0f 90       	pop	r0
     d7c:	0f 90       	pop	r0
     d7e:	0f 90       	pop	r0
     d80:	cf 91       	pop	r28
     d82:	df 91       	pop	r29
     d84:	1f 91       	pop	r17
     d86:	0f 91       	pop	r16
     d88:	08 95       	ret

00000d8a <GPIO_setupPinDirection>:
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num,
		GPIO_PinDirectionType direction)
{
     d8a:	df 93       	push	r29
     d8c:	cf 93       	push	r28
     d8e:	00 d0       	rcall	.+0      	; 0xd90 <GPIO_setupPinDirection+0x6>
     d90:	00 d0       	rcall	.+0      	; 0xd92 <GPIO_setupPinDirection+0x8>
     d92:	0f 92       	push	r0
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62
     d98:	89 83       	std	Y+1, r24	; 0x01
     d9a:	6a 83       	std	Y+2, r22	; 0x02
     d9c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d9e:	8a 81       	ldd	r24, Y+2	; 0x02
     da0:	88 30       	cpi	r24, 0x08	; 8
     da2:	08 f0       	brcs	.+2      	; 0xda6 <GPIO_setupPinDirection+0x1c>
     da4:	d5 c0       	rjmp	.+426    	; 0xf50 <GPIO_setupPinDirection+0x1c6>
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	84 30       	cpi	r24, 0x04	; 4
     daa:	08 f0       	brcs	.+2      	; 0xdae <GPIO_setupPinDirection+0x24>
     dac:	d1 c0       	rjmp	.+418    	; 0xf50 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch (port_num)
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	28 2f       	mov	r18, r24
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	3d 83       	std	Y+5, r19	; 0x05
     db6:	2c 83       	std	Y+4, r18	; 0x04
     db8:	8c 81       	ldd	r24, Y+4	; 0x04
     dba:	9d 81       	ldd	r25, Y+5	; 0x05
     dbc:	81 30       	cpi	r24, 0x01	; 1
     dbe:	91 05       	cpc	r25, r1
     dc0:	09 f4       	brne	.+2      	; 0xdc4 <GPIO_setupPinDirection+0x3a>
     dc2:	43 c0       	rjmp	.+134    	; 0xe4a <GPIO_setupPinDirection+0xc0>
     dc4:	2c 81       	ldd	r18, Y+4	; 0x04
     dc6:	3d 81       	ldd	r19, Y+5	; 0x05
     dc8:	22 30       	cpi	r18, 0x02	; 2
     dca:	31 05       	cpc	r19, r1
     dcc:	2c f4       	brge	.+10     	; 0xdd8 <GPIO_setupPinDirection+0x4e>
     dce:	8c 81       	ldd	r24, Y+4	; 0x04
     dd0:	9d 81       	ldd	r25, Y+5	; 0x05
     dd2:	00 97       	sbiw	r24, 0x00	; 0
     dd4:	71 f0       	breq	.+28     	; 0xdf2 <GPIO_setupPinDirection+0x68>
     dd6:	bc c0       	rjmp	.+376    	; 0xf50 <GPIO_setupPinDirection+0x1c6>
     dd8:	2c 81       	ldd	r18, Y+4	; 0x04
     dda:	3d 81       	ldd	r19, Y+5	; 0x05
     ddc:	22 30       	cpi	r18, 0x02	; 2
     dde:	31 05       	cpc	r19, r1
     de0:	09 f4       	brne	.+2      	; 0xde4 <GPIO_setupPinDirection+0x5a>
     de2:	5f c0       	rjmp	.+190    	; 0xea2 <GPIO_setupPinDirection+0x118>
     de4:	8c 81       	ldd	r24, Y+4	; 0x04
     de6:	9d 81       	ldd	r25, Y+5	; 0x05
     de8:	83 30       	cpi	r24, 0x03	; 3
     dea:	91 05       	cpc	r25, r1
     dec:	09 f4       	brne	.+2      	; 0xdf0 <GPIO_setupPinDirection+0x66>
     dee:	85 c0       	rjmp	.+266    	; 0xefa <GPIO_setupPinDirection+0x170>
     df0:	af c0       	rjmp	.+350    	; 0xf50 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if (direction == PIN_OUTPUT)
     df2:	8b 81       	ldd	r24, Y+3	; 0x03
     df4:	81 30       	cpi	r24, 0x01	; 1
     df6:	a1 f4       	brne	.+40     	; 0xe20 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA_REG.Byte, pin_num);
     df8:	aa e3       	ldi	r26, 0x3A	; 58
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	ea e3       	ldi	r30, 0x3A	; 58
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	48 2f       	mov	r20, r24
     e04:	8a 81       	ldd	r24, Y+2	; 0x02
     e06:	28 2f       	mov	r18, r24
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	02 2e       	mov	r0, r18
     e10:	02 c0       	rjmp	.+4      	; 0xe16 <GPIO_setupPinDirection+0x8c>
     e12:	88 0f       	add	r24, r24
     e14:	99 1f       	adc	r25, r25
     e16:	0a 94       	dec	r0
     e18:	e2 f7       	brpl	.-8      	; 0xe12 <GPIO_setupPinDirection+0x88>
     e1a:	84 2b       	or	r24, r20
     e1c:	8c 93       	st	X, r24
     e1e:	98 c0       	rjmp	.+304    	; 0xf50 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA_REG.Byte, pin_num);
     e20:	aa e3       	ldi	r26, 0x3A	; 58
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	ea e3       	ldi	r30, 0x3A	; 58
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	48 2f       	mov	r20, r24
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	02 2e       	mov	r0, r18
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <GPIO_setupPinDirection+0xb4>
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	0a 94       	dec	r0
     e40:	e2 f7       	brpl	.-8      	; 0xe3a <GPIO_setupPinDirection+0xb0>
     e42:	80 95       	com	r24
     e44:	84 23       	and	r24, r20
     e46:	8c 93       	st	X, r24
     e48:	83 c0       	rjmp	.+262    	; 0xf50 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT)
     e4a:	8b 81       	ldd	r24, Y+3	; 0x03
     e4c:	81 30       	cpi	r24, 0x01	; 1
     e4e:	a1 f4       	brne	.+40     	; 0xe78 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB_REG.Byte, pin_num);
     e50:	a7 e3       	ldi	r26, 0x37	; 55
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e7 e3       	ldi	r30, 0x37	; 55
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	48 2f       	mov	r20, r24
     e5c:	8a 81       	ldd	r24, Y+2	; 0x02
     e5e:	28 2f       	mov	r18, r24
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	02 2e       	mov	r0, r18
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <GPIO_setupPinDirection+0xe4>
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	0a 94       	dec	r0
     e70:	e2 f7       	brpl	.-8      	; 0xe6a <GPIO_setupPinDirection+0xe0>
     e72:	84 2b       	or	r24, r20
     e74:	8c 93       	st	X, r24
     e76:	6c c0       	rjmp	.+216    	; 0xf50 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB_REG.Byte, pin_num);
     e78:	a7 e3       	ldi	r26, 0x37	; 55
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e7 e3       	ldi	r30, 0x37	; 55
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	48 2f       	mov	r20, r24
     e84:	8a 81       	ldd	r24, Y+2	; 0x02
     e86:	28 2f       	mov	r18, r24
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	02 2e       	mov	r0, r18
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <GPIO_setupPinDirection+0x10c>
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	0a 94       	dec	r0
     e98:	e2 f7       	brpl	.-8      	; 0xe92 <GPIO_setupPinDirection+0x108>
     e9a:	80 95       	com	r24
     e9c:	84 23       	and	r24, r20
     e9e:	8c 93       	st	X, r24
     ea0:	57 c0       	rjmp	.+174    	; 0xf50 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT)
     ea2:	8b 81       	ldd	r24, Y+3	; 0x03
     ea4:	81 30       	cpi	r24, 0x01	; 1
     ea6:	a1 f4       	brne	.+40     	; 0xed0 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC_REG.Byte, pin_num);
     ea8:	a4 e3       	ldi	r26, 0x34	; 52
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e4 e3       	ldi	r30, 0x34	; 52
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	48 2f       	mov	r20, r24
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	02 2e       	mov	r0, r18
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <GPIO_setupPinDirection+0x13c>
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	0a 94       	dec	r0
     ec8:	e2 f7       	brpl	.-8      	; 0xec2 <GPIO_setupPinDirection+0x138>
     eca:	84 2b       	or	r24, r20
     ecc:	8c 93       	st	X, r24
     ece:	40 c0       	rjmp	.+128    	; 0xf50 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC_REG.Byte, pin_num);
     ed0:	a4 e3       	ldi	r26, 0x34	; 52
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e4 e3       	ldi	r30, 0x34	; 52
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	48 2f       	mov	r20, r24
     edc:	8a 81       	ldd	r24, Y+2	; 0x02
     ede:	28 2f       	mov	r18, r24
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	02 2e       	mov	r0, r18
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <GPIO_setupPinDirection+0x164>
     eea:	88 0f       	add	r24, r24
     eec:	99 1f       	adc	r25, r25
     eee:	0a 94       	dec	r0
     ef0:	e2 f7       	brpl	.-8      	; 0xeea <GPIO_setupPinDirection+0x160>
     ef2:	80 95       	com	r24
     ef4:	84 23       	and	r24, r20
     ef6:	8c 93       	st	X, r24
     ef8:	2b c0       	rjmp	.+86     	; 0xf50 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if (direction == PIN_OUTPUT)
     efa:	8b 81       	ldd	r24, Y+3	; 0x03
     efc:	81 30       	cpi	r24, 0x01	; 1
     efe:	a1 f4       	brne	.+40     	; 0xf28 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD_REG.Byte, pin_num);
     f00:	a1 e3       	ldi	r26, 0x31	; 49
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e1 e3       	ldi	r30, 0x31	; 49
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	48 2f       	mov	r20, r24
     f0c:	8a 81       	ldd	r24, Y+2	; 0x02
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	02 2e       	mov	r0, r18
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <GPIO_setupPinDirection+0x194>
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	0a 94       	dec	r0
     f20:	e2 f7       	brpl	.-8      	; 0xf1a <GPIO_setupPinDirection+0x190>
     f22:	84 2b       	or	r24, r20
     f24:	8c 93       	st	X, r24
     f26:	14 c0       	rjmp	.+40     	; 0xf50 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD_REG.Byte, pin_num);
     f28:	a1 e3       	ldi	r26, 0x31	; 49
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e1 e3       	ldi	r30, 0x31	; 49
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	48 2f       	mov	r20, r24
     f34:	8a 81       	ldd	r24, Y+2	; 0x02
     f36:	28 2f       	mov	r18, r24
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	02 2e       	mov	r0, r18
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <GPIO_setupPinDirection+0x1bc>
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	0a 94       	dec	r0
     f48:	e2 f7       	brpl	.-8      	; 0xf42 <GPIO_setupPinDirection+0x1b8>
     f4a:	80 95       	com	r24
     f4c:	84 23       	and	r24, r20
     f4e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
     f54:	0f 90       	pop	r0
     f56:	0f 90       	pop	r0
     f58:	0f 90       	pop	r0
     f5a:	cf 91       	pop	r28
     f5c:	df 91       	pop	r29
     f5e:	08 95       	ret

00000f60 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     f60:	df 93       	push	r29
     f62:	cf 93       	push	r28
     f64:	00 d0       	rcall	.+0      	; 0xf66 <GPIO_writePin+0x6>
     f66:	00 d0       	rcall	.+0      	; 0xf68 <GPIO_writePin+0x8>
     f68:	0f 92       	push	r0
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62
     f6e:	89 83       	std	Y+1, r24	; 0x01
     f70:	6a 83       	std	Y+2, r22	; 0x02
     f72:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	88 30       	cpi	r24, 0x08	; 8
     f78:	08 f0       	brcs	.+2      	; 0xf7c <GPIO_writePin+0x1c>
     f7a:	d5 c0       	rjmp	.+426    	; 0x1126 <GPIO_writePin+0x1c6>
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
     f7e:	84 30       	cpi	r24, 0x04	; 4
     f80:	08 f0       	brcs	.+2      	; 0xf84 <GPIO_writePin+0x24>
     f82:	d1 c0       	rjmp	.+418    	; 0x1126 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin value as required */
		switch (port_num)
     f84:	89 81       	ldd	r24, Y+1	; 0x01
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	3d 83       	std	Y+5, r19	; 0x05
     f8c:	2c 83       	std	Y+4, r18	; 0x04
     f8e:	8c 81       	ldd	r24, Y+4	; 0x04
     f90:	9d 81       	ldd	r25, Y+5	; 0x05
     f92:	81 30       	cpi	r24, 0x01	; 1
     f94:	91 05       	cpc	r25, r1
     f96:	09 f4       	brne	.+2      	; 0xf9a <GPIO_writePin+0x3a>
     f98:	43 c0       	rjmp	.+134    	; 0x1020 <GPIO_writePin+0xc0>
     f9a:	2c 81       	ldd	r18, Y+4	; 0x04
     f9c:	3d 81       	ldd	r19, Y+5	; 0x05
     f9e:	22 30       	cpi	r18, 0x02	; 2
     fa0:	31 05       	cpc	r19, r1
     fa2:	2c f4       	brge	.+10     	; 0xfae <GPIO_writePin+0x4e>
     fa4:	8c 81       	ldd	r24, Y+4	; 0x04
     fa6:	9d 81       	ldd	r25, Y+5	; 0x05
     fa8:	00 97       	sbiw	r24, 0x00	; 0
     faa:	71 f0       	breq	.+28     	; 0xfc8 <GPIO_writePin+0x68>
     fac:	bc c0       	rjmp	.+376    	; 0x1126 <GPIO_writePin+0x1c6>
     fae:	2c 81       	ldd	r18, Y+4	; 0x04
     fb0:	3d 81       	ldd	r19, Y+5	; 0x05
     fb2:	22 30       	cpi	r18, 0x02	; 2
     fb4:	31 05       	cpc	r19, r1
     fb6:	09 f4       	brne	.+2      	; 0xfba <GPIO_writePin+0x5a>
     fb8:	5f c0       	rjmp	.+190    	; 0x1078 <GPIO_writePin+0x118>
     fba:	8c 81       	ldd	r24, Y+4	; 0x04
     fbc:	9d 81       	ldd	r25, Y+5	; 0x05
     fbe:	83 30       	cpi	r24, 0x03	; 3
     fc0:	91 05       	cpc	r25, r1
     fc2:	09 f4       	brne	.+2      	; 0xfc6 <GPIO_writePin+0x66>
     fc4:	85 c0       	rjmp	.+266    	; 0x10d0 <GPIO_writePin+0x170>
     fc6:	af c0       	rjmp	.+350    	; 0x1126 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if (value == LOGIC_LOW)
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	88 23       	and	r24, r24
     fcc:	a9 f4       	brne	.+42     	; 0xff8 <GPIO_writePin+0x98>
			{
				CLEAR_BIT(PORTA_REG.Byte, pin_num);
     fce:	ab e3       	ldi	r26, 0x3B	; 59
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	eb e3       	ldi	r30, 0x3B	; 59
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	48 2f       	mov	r20, r24
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	02 2e       	mov	r0, r18
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <GPIO_writePin+0x8c>
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	0a 94       	dec	r0
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <GPIO_writePin+0x88>
     ff0:	80 95       	com	r24
     ff2:	84 23       	and	r24, r20
     ff4:	8c 93       	st	X, r24
     ff6:	97 c0       	rjmp	.+302    	; 0x1126 <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTA_REG.Byte, pin_num);
     ff8:	ab e3       	ldi	r26, 0x3B	; 59
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	eb e3       	ldi	r30, 0x3B	; 59
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	48 2f       	mov	r20, r24
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	02 2e       	mov	r0, r18
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <GPIO_writePin+0xb6>
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	0a 94       	dec	r0
    1018:	e2 f7       	brpl	.-8      	; 0x1012 <GPIO_writePin+0xb2>
    101a:	84 2b       	or	r24, r20
    101c:	8c 93       	st	X, r24
    101e:	83 c0       	rjmp	.+262    	; 0x1126 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if (value == LOGIC_LOW)
    1020:	8b 81       	ldd	r24, Y+3	; 0x03
    1022:	88 23       	and	r24, r24
    1024:	a9 f4       	brne	.+42     	; 0x1050 <GPIO_writePin+0xf0>
			{
				CLEAR_BIT(PORTB_REG.Byte, pin_num);
    1026:	a8 e3       	ldi	r26, 0x38	; 56
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e8 e3       	ldi	r30, 0x38	; 56
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	48 2f       	mov	r20, r24
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	02 2e       	mov	r0, r18
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <GPIO_writePin+0xe4>
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	0a 94       	dec	r0
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <GPIO_writePin+0xe0>
    1048:	80 95       	com	r24
    104a:	84 23       	and	r24, r20
    104c:	8c 93       	st	X, r24
    104e:	6b c0       	rjmp	.+214    	; 0x1126 <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTB_REG.Byte, pin_num);
    1050:	a8 e3       	ldi	r26, 0x38	; 56
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e8 e3       	ldi	r30, 0x38	; 56
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	48 2f       	mov	r20, r24
    105c:	8a 81       	ldd	r24, Y+2	; 0x02
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	02 2e       	mov	r0, r18
    1068:	02 c0       	rjmp	.+4      	; 0x106e <GPIO_writePin+0x10e>
    106a:	88 0f       	add	r24, r24
    106c:	99 1f       	adc	r25, r25
    106e:	0a 94       	dec	r0
    1070:	e2 f7       	brpl	.-8      	; 0x106a <GPIO_writePin+0x10a>
    1072:	84 2b       	or	r24, r20
    1074:	8c 93       	st	X, r24
    1076:	57 c0       	rjmp	.+174    	; 0x1126 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if (value == LOGIC_LOW)
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	88 23       	and	r24, r24
    107c:	a9 f4       	brne	.+42     	; 0x10a8 <GPIO_writePin+0x148>
			{
				CLEAR_BIT(PORTC_REG.Byte, pin_num);
    107e:	a5 e3       	ldi	r26, 0x35	; 53
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	e5 e3       	ldi	r30, 0x35	; 53
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	48 2f       	mov	r20, r24
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	28 2f       	mov	r18, r24
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	02 2e       	mov	r0, r18
    1096:	02 c0       	rjmp	.+4      	; 0x109c <GPIO_writePin+0x13c>
    1098:	88 0f       	add	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	0a 94       	dec	r0
    109e:	e2 f7       	brpl	.-8      	; 0x1098 <GPIO_writePin+0x138>
    10a0:	80 95       	com	r24
    10a2:	84 23       	and	r24, r20
    10a4:	8c 93       	st	X, r24
    10a6:	3f c0       	rjmp	.+126    	; 0x1126 <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTC_REG.Byte, pin_num);
    10a8:	a5 e3       	ldi	r26, 0x35	; 53
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	e5 e3       	ldi	r30, 0x35	; 53
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	48 2f       	mov	r20, r24
    10b4:	8a 81       	ldd	r24, Y+2	; 0x02
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	02 2e       	mov	r0, r18
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <GPIO_writePin+0x166>
    10c2:	88 0f       	add	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	0a 94       	dec	r0
    10c8:	e2 f7       	brpl	.-8      	; 0x10c2 <GPIO_writePin+0x162>
    10ca:	84 2b       	or	r24, r20
    10cc:	8c 93       	st	X, r24
    10ce:	2b c0       	rjmp	.+86     	; 0x1126 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if (value == LOGIC_LOW)
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	88 23       	and	r24, r24
    10d4:	a9 f4       	brne	.+42     	; 0x1100 <GPIO_writePin+0x1a0>
			{
				CLEAR_BIT(PORTD_REG.Byte, pin_num);
    10d6:	a2 e3       	ldi	r26, 0x32	; 50
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e2 e3       	ldi	r30, 0x32	; 50
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	48 2f       	mov	r20, r24
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	02 2e       	mov	r0, r18
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <GPIO_writePin+0x194>
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	0a 94       	dec	r0
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <GPIO_writePin+0x190>
    10f8:	80 95       	com	r24
    10fa:	84 23       	and	r24, r20
    10fc:	8c 93       	st	X, r24
    10fe:	13 c0       	rjmp	.+38     	; 0x1126 <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTD_REG.Byte, pin_num);
    1100:	a2 e3       	ldi	r26, 0x32	; 50
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e2 e3       	ldi	r30, 0x32	; 50
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	48 2f       	mov	r20, r24
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	28 2f       	mov	r18, r24
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	02 2e       	mov	r0, r18
    1118:	02 c0       	rjmp	.+4      	; 0x111e <GPIO_writePin+0x1be>
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	0a 94       	dec	r0
    1120:	e2 f7       	brpl	.-8      	; 0x111a <GPIO_writePin+0x1ba>
    1122:	84 2b       	or	r24, r20
    1124:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	cf 91       	pop	r28
    1132:	df 91       	pop	r29
    1134:	08 95       	ret

00001136 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1136:	df 93       	push	r29
    1138:	cf 93       	push	r28
    113a:	00 d0       	rcall	.+0      	; 0x113c <GPIO_readPin+0x6>
    113c:	00 d0       	rcall	.+0      	; 0x113e <GPIO_readPin+0x8>
    113e:	0f 92       	push	r0
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	8a 83       	std	Y+2, r24	; 0x02
    1146:	6b 83       	std	Y+3, r22	; 0x03
	uint8 value = LOGIC_LOW;
    1148:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	88 30       	cpi	r24, 0x08	; 8
    114e:	08 f0       	brcs	.+2      	; 0x1152 <GPIO_readPin+0x1c>
    1150:	84 c0       	rjmp	.+264    	; 0x125a <GPIO_readPin+0x124>
    1152:	8a 81       	ldd	r24, Y+2	; 0x02
    1154:	84 30       	cpi	r24, 0x04	; 4
    1156:	08 f0       	brcs	.+2      	; 0x115a <GPIO_readPin+0x24>
    1158:	80 c0       	rjmp	.+256    	; 0x125a <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Return the pin value */
		switch (port_num)
    115a:	8a 81       	ldd	r24, Y+2	; 0x02
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	3d 83       	std	Y+5, r19	; 0x05
    1162:	2c 83       	std	Y+4, r18	; 0x04
    1164:	4c 81       	ldd	r20, Y+4	; 0x04
    1166:	5d 81       	ldd	r21, Y+5	; 0x05
    1168:	41 30       	cpi	r20, 0x01	; 1
    116a:	51 05       	cpc	r21, r1
    116c:	79 f1       	breq	.+94     	; 0x11cc <GPIO_readPin+0x96>
    116e:	8c 81       	ldd	r24, Y+4	; 0x04
    1170:	9d 81       	ldd	r25, Y+5	; 0x05
    1172:	82 30       	cpi	r24, 0x02	; 2
    1174:	91 05       	cpc	r25, r1
    1176:	34 f4       	brge	.+12     	; 0x1184 <GPIO_readPin+0x4e>
    1178:	2c 81       	ldd	r18, Y+4	; 0x04
    117a:	3d 81       	ldd	r19, Y+5	; 0x05
    117c:	21 15       	cp	r18, r1
    117e:	31 05       	cpc	r19, r1
    1180:	69 f0       	breq	.+26     	; 0x119c <GPIO_readPin+0x66>
    1182:	6b c0       	rjmp	.+214    	; 0x125a <GPIO_readPin+0x124>
    1184:	4c 81       	ldd	r20, Y+4	; 0x04
    1186:	5d 81       	ldd	r21, Y+5	; 0x05
    1188:	42 30       	cpi	r20, 0x02	; 2
    118a:	51 05       	cpc	r21, r1
    118c:	b9 f1       	breq	.+110    	; 0x11fc <GPIO_readPin+0xc6>
    118e:	8c 81       	ldd	r24, Y+4	; 0x04
    1190:	9d 81       	ldd	r25, Y+5	; 0x05
    1192:	83 30       	cpi	r24, 0x03	; 3
    1194:	91 05       	cpc	r25, r1
    1196:	09 f4       	brne	.+2      	; 0x119a <GPIO_readPin+0x64>
    1198:	49 c0       	rjmp	.+146    	; 0x122c <GPIO_readPin+0xf6>
    119a:	5f c0       	rjmp	.+190    	; 0x125a <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if (BIT_IS_SET(PINA_REG.Byte, pin_num))
    119c:	e9 e3       	ldi	r30, 0x39	; 57
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	88 2f       	mov	r24, r24
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	a9 01       	movw	r20, r18
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <GPIO_readPin+0x7e>
    11b0:	55 95       	asr	r21
    11b2:	47 95       	ror	r20
    11b4:	8a 95       	dec	r24
    11b6:	e2 f7       	brpl	.-8      	; 0x11b0 <GPIO_readPin+0x7a>
    11b8:	ca 01       	movw	r24, r20
    11ba:	81 70       	andi	r24, 0x01	; 1
    11bc:	90 70       	andi	r25, 0x00	; 0
    11be:	88 23       	and	r24, r24
    11c0:	19 f0       	breq	.+6      	; 0x11c8 <GPIO_readPin+0x92>
			{
				value = LOGIC_HIGH;
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	89 83       	std	Y+1, r24	; 0x01
    11c6:	49 c0       	rjmp	.+146    	; 0x125a <GPIO_readPin+0x124>
			}
			else
			{
				value = LOGIC_LOW;
    11c8:	19 82       	std	Y+1, r1	; 0x01
    11ca:	47 c0       	rjmp	.+142    	; 0x125a <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if (BIT_IS_SET(PINB_REG.Byte, pin_num))
    11cc:	e6 e3       	ldi	r30, 0x36	; 54
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	88 2f       	mov	r24, r24
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	a9 01       	movw	r20, r18
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <GPIO_readPin+0xae>
    11e0:	55 95       	asr	r21
    11e2:	47 95       	ror	r20
    11e4:	8a 95       	dec	r24
    11e6:	e2 f7       	brpl	.-8      	; 0x11e0 <GPIO_readPin+0xaa>
    11e8:	ca 01       	movw	r24, r20
    11ea:	81 70       	andi	r24, 0x01	; 1
    11ec:	90 70       	andi	r25, 0x00	; 0
    11ee:	88 23       	and	r24, r24
    11f0:	19 f0       	breq	.+6      	; 0x11f8 <GPIO_readPin+0xc2>
			{
				value = LOGIC_HIGH;
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	89 83       	std	Y+1, r24	; 0x01
    11f6:	31 c0       	rjmp	.+98     	; 0x125a <GPIO_readPin+0x124>
			}
			else
			{
				value = LOGIC_LOW;
    11f8:	19 82       	std	Y+1, r1	; 0x01
    11fa:	2f c0       	rjmp	.+94     	; 0x125a <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if (BIT_IS_SET(PINC_REG.Byte, pin_num))
    11fc:	e3 e3       	ldi	r30, 0x33	; 51
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	88 2f       	mov	r24, r24
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	a9 01       	movw	r20, r18
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <GPIO_readPin+0xde>
    1210:	55 95       	asr	r21
    1212:	47 95       	ror	r20
    1214:	8a 95       	dec	r24
    1216:	e2 f7       	brpl	.-8      	; 0x1210 <GPIO_readPin+0xda>
    1218:	ca 01       	movw	r24, r20
    121a:	81 70       	andi	r24, 0x01	; 1
    121c:	90 70       	andi	r25, 0x00	; 0
    121e:	88 23       	and	r24, r24
    1220:	19 f0       	breq	.+6      	; 0x1228 <GPIO_readPin+0xf2>
			{
				value = LOGIC_HIGH;
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	89 83       	std	Y+1, r24	; 0x01
    1226:	19 c0       	rjmp	.+50     	; 0x125a <GPIO_readPin+0x124>
			}
			else
			{
				value = LOGIC_LOW;
    1228:	19 82       	std	Y+1, r1	; 0x01
    122a:	17 c0       	rjmp	.+46     	; 0x125a <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if (BIT_IS_SET(PIND_REG.Byte, pin_num))
    122c:	e0 e3       	ldi	r30, 0x30	; 48
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	8b 81       	ldd	r24, Y+3	; 0x03
    1238:	88 2f       	mov	r24, r24
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	a9 01       	movw	r20, r18
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <GPIO_readPin+0x10e>
    1240:	55 95       	asr	r21
    1242:	47 95       	ror	r20
    1244:	8a 95       	dec	r24
    1246:	e2 f7       	brpl	.-8      	; 0x1240 <GPIO_readPin+0x10a>
    1248:	ca 01       	movw	r24, r20
    124a:	81 70       	andi	r24, 0x01	; 1
    124c:	90 70       	andi	r25, 0x00	; 0
    124e:	88 23       	and	r24, r24
    1250:	19 f0       	breq	.+6      	; 0x1258 <GPIO_readPin+0x122>
			{
				value = LOGIC_HIGH;
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	89 83       	std	Y+1, r24	; 0x01
    1256:	01 c0       	rjmp	.+2      	; 0x125a <GPIO_readPin+0x124>
			}
			else
			{
				value = LOGIC_LOW;
    1258:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return value;
    125a:	89 81       	ldd	r24, Y+1	; 0x01
}
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	0f 90       	pop	r0
    1264:	0f 90       	pop	r0
    1266:	cf 91       	pop	r28
    1268:	df 91       	pop	r29
    126a:	08 95       	ret

0000126c <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    126c:	df 93       	push	r29
    126e:	cf 93       	push	r28
    1270:	00 d0       	rcall	.+0      	; 0x1272 <GPIO_setupPortDirection+0x6>
    1272:	00 d0       	rcall	.+0      	; 0x1274 <GPIO_setupPortDirection+0x8>
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    1278:	89 83       	std	Y+1, r24	; 0x01
    127a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS)
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	84 30       	cpi	r24, 0x04	; 4
    1280:	90 f5       	brcc	.+100    	; 0x12e6 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch (port_num)
    1282:	89 81       	ldd	r24, Y+1	; 0x01
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	3c 83       	std	Y+4, r19	; 0x04
    128a:	2b 83       	std	Y+3, r18	; 0x03
    128c:	8b 81       	ldd	r24, Y+3	; 0x03
    128e:	9c 81       	ldd	r25, Y+4	; 0x04
    1290:	81 30       	cpi	r24, 0x01	; 1
    1292:	91 05       	cpc	r25, r1
    1294:	d1 f0       	breq	.+52     	; 0x12ca <GPIO_setupPortDirection+0x5e>
    1296:	2b 81       	ldd	r18, Y+3	; 0x03
    1298:	3c 81       	ldd	r19, Y+4	; 0x04
    129a:	22 30       	cpi	r18, 0x02	; 2
    129c:	31 05       	cpc	r19, r1
    129e:	2c f4       	brge	.+10     	; 0x12aa <GPIO_setupPortDirection+0x3e>
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	9c 81       	ldd	r25, Y+4	; 0x04
    12a4:	00 97       	sbiw	r24, 0x00	; 0
    12a6:	61 f0       	breq	.+24     	; 0x12c0 <GPIO_setupPortDirection+0x54>
    12a8:	1e c0       	rjmp	.+60     	; 0x12e6 <GPIO_setupPortDirection+0x7a>
    12aa:	2b 81       	ldd	r18, Y+3	; 0x03
    12ac:	3c 81       	ldd	r19, Y+4	; 0x04
    12ae:	22 30       	cpi	r18, 0x02	; 2
    12b0:	31 05       	cpc	r19, r1
    12b2:	81 f0       	breq	.+32     	; 0x12d4 <GPIO_setupPortDirection+0x68>
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	9c 81       	ldd	r25, Y+4	; 0x04
    12b8:	83 30       	cpi	r24, 0x03	; 3
    12ba:	91 05       	cpc	r25, r1
    12bc:	81 f0       	breq	.+32     	; 0x12de <GPIO_setupPortDirection+0x72>
    12be:	13 c0       	rjmp	.+38     	; 0x12e6 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA_REG.Byte = direction;
    12c0:	ea e3       	ldi	r30, 0x3A	; 58
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	8a 81       	ldd	r24, Y+2	; 0x02
    12c6:	80 83       	st	Z, r24
    12c8:	0e c0       	rjmp	.+28     	; 0x12e6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB_REG.Byte = direction;
    12ca:	e7 e3       	ldi	r30, 0x37	; 55
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	8a 81       	ldd	r24, Y+2	; 0x02
    12d0:	80 83       	st	Z, r24
    12d2:	09 c0       	rjmp	.+18     	; 0x12e6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC_REG.Byte = direction;
    12d4:	e4 e3       	ldi	r30, 0x34	; 52
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	80 83       	st	Z, r24
    12dc:	04 c0       	rjmp	.+8      	; 0x12e6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD_REG.Byte = direction;
    12de:	e1 e3       	ldi	r30, 0x31	; 49
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	80 83       	st	Z, r24
			break;
		}
	}
}
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	0f 90       	pop	r0
    12ee:	cf 91       	pop	r28
    12f0:	df 91       	pop	r29
    12f2:	08 95       	ret

000012f4 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    12f4:	df 93       	push	r29
    12f6:	cf 93       	push	r28
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <GPIO_writePort+0x6>
    12fa:	00 d0       	rcall	.+0      	; 0x12fc <GPIO_writePort+0x8>
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
    1300:	89 83       	std	Y+1, r24	; 0x01
    1302:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS)
    1304:	89 81       	ldd	r24, Y+1	; 0x01
    1306:	84 30       	cpi	r24, 0x04	; 4
    1308:	90 f5       	brcc	.+100    	; 0x136e <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port value as required */
		switch (port_num)
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	28 2f       	mov	r18, r24
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	3c 83       	std	Y+4, r19	; 0x04
    1312:	2b 83       	std	Y+3, r18	; 0x03
    1314:	8b 81       	ldd	r24, Y+3	; 0x03
    1316:	9c 81       	ldd	r25, Y+4	; 0x04
    1318:	81 30       	cpi	r24, 0x01	; 1
    131a:	91 05       	cpc	r25, r1
    131c:	d1 f0       	breq	.+52     	; 0x1352 <GPIO_writePort+0x5e>
    131e:	2b 81       	ldd	r18, Y+3	; 0x03
    1320:	3c 81       	ldd	r19, Y+4	; 0x04
    1322:	22 30       	cpi	r18, 0x02	; 2
    1324:	31 05       	cpc	r19, r1
    1326:	2c f4       	brge	.+10     	; 0x1332 <GPIO_writePort+0x3e>
    1328:	8b 81       	ldd	r24, Y+3	; 0x03
    132a:	9c 81       	ldd	r25, Y+4	; 0x04
    132c:	00 97       	sbiw	r24, 0x00	; 0
    132e:	61 f0       	breq	.+24     	; 0x1348 <GPIO_writePort+0x54>
    1330:	1e c0       	rjmp	.+60     	; 0x136e <GPIO_writePort+0x7a>
    1332:	2b 81       	ldd	r18, Y+3	; 0x03
    1334:	3c 81       	ldd	r19, Y+4	; 0x04
    1336:	22 30       	cpi	r18, 0x02	; 2
    1338:	31 05       	cpc	r19, r1
    133a:	81 f0       	breq	.+32     	; 0x135c <GPIO_writePort+0x68>
    133c:	8b 81       	ldd	r24, Y+3	; 0x03
    133e:	9c 81       	ldd	r25, Y+4	; 0x04
    1340:	83 30       	cpi	r24, 0x03	; 3
    1342:	91 05       	cpc	r25, r1
    1344:	81 f0       	breq	.+32     	; 0x1366 <GPIO_writePort+0x72>
    1346:	13 c0       	rjmp	.+38     	; 0x136e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA_REG.Byte = value;
    1348:	eb e3       	ldi	r30, 0x3B	; 59
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	80 83       	st	Z, r24
    1350:	0e c0       	rjmp	.+28     	; 0x136e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB_REG.Byte = value;
    1352:	e8 e3       	ldi	r30, 0x38	; 56
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	80 83       	st	Z, r24
    135a:	09 c0       	rjmp	.+18     	; 0x136e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC_REG.Byte = value;
    135c:	e5 e3       	ldi	r30, 0x35	; 53
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	80 83       	st	Z, r24
    1364:	04 c0       	rjmp	.+8      	; 0x136e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD_REG.Byte = value;
    1366:	e2 e3       	ldi	r30, 0x32	; 50
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	8a 81       	ldd	r24, Y+2	; 0x02
    136c:	80 83       	st	Z, r24
			break;
		}
	}
}
    136e:	0f 90       	pop	r0
    1370:	0f 90       	pop	r0
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
    1376:	cf 91       	pop	r28
    1378:	df 91       	pop	r29
    137a:	08 95       	ret

0000137c <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    137c:	df 93       	push	r29
    137e:	cf 93       	push	r28
    1380:	00 d0       	rcall	.+0      	; 0x1382 <GPIO_readPort+0x6>
    1382:	00 d0       	rcall	.+0      	; 0x1384 <GPIO_readPort+0x8>
    1384:	0f 92       	push	r0
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62
    138a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    138c:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS)
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	84 30       	cpi	r24, 0x04	; 4
    1392:	10 f0       	brcs	.+4      	; 0x1398 <GPIO_readPort+0x1c>
	{
		return 0;
    1394:	1d 82       	std	Y+5, r1	; 0x05
    1396:	34 c0       	rjmp	.+104    	; 0x1400 <GPIO_readPort+0x84>
	}
	else
	{
		/* Return the pin value */
		switch (port_num)
    1398:	8a 81       	ldd	r24, Y+2	; 0x02
    139a:	28 2f       	mov	r18, r24
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	3c 83       	std	Y+4, r19	; 0x04
    13a0:	2b 83       	std	Y+3, r18	; 0x03
    13a2:	8b 81       	ldd	r24, Y+3	; 0x03
    13a4:	9c 81       	ldd	r25, Y+4	; 0x04
    13a6:	81 30       	cpi	r24, 0x01	; 1
    13a8:	91 05       	cpc	r25, r1
    13aa:	d1 f0       	breq	.+52     	; 0x13e0 <GPIO_readPort+0x64>
    13ac:	2b 81       	ldd	r18, Y+3	; 0x03
    13ae:	3c 81       	ldd	r19, Y+4	; 0x04
    13b0:	22 30       	cpi	r18, 0x02	; 2
    13b2:	31 05       	cpc	r19, r1
    13b4:	2c f4       	brge	.+10     	; 0x13c0 <GPIO_readPort+0x44>
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ba:	00 97       	sbiw	r24, 0x00	; 0
    13bc:	61 f0       	breq	.+24     	; 0x13d6 <GPIO_readPort+0x5a>
    13be:	1e c0       	rjmp	.+60     	; 0x13fc <GPIO_readPort+0x80>
    13c0:	2b 81       	ldd	r18, Y+3	; 0x03
    13c2:	3c 81       	ldd	r19, Y+4	; 0x04
    13c4:	22 30       	cpi	r18, 0x02	; 2
    13c6:	31 05       	cpc	r19, r1
    13c8:	81 f0       	breq	.+32     	; 0x13ea <GPIO_readPort+0x6e>
    13ca:	8b 81       	ldd	r24, Y+3	; 0x03
    13cc:	9c 81       	ldd	r25, Y+4	; 0x04
    13ce:	83 30       	cpi	r24, 0x03	; 3
    13d0:	91 05       	cpc	r25, r1
    13d2:	81 f0       	breq	.+32     	; 0x13f4 <GPIO_readPort+0x78>
    13d4:	13 c0       	rjmp	.+38     	; 0x13fc <GPIO_readPort+0x80>
		{
		case PORTA_ID:
			value = PINA_REG.Byte;
    13d6:	e9 e3       	ldi	r30, 0x39	; 57
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	89 83       	std	Y+1, r24	; 0x01
    13de:	0e c0       	rjmp	.+28     	; 0x13fc <GPIO_readPort+0x80>
			break;
		case PORTB_ID:
			value = PINB_REG.Byte;
    13e0:	e6 e3       	ldi	r30, 0x36	; 54
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	89 83       	std	Y+1, r24	; 0x01
    13e8:	09 c0       	rjmp	.+18     	; 0x13fc <GPIO_readPort+0x80>
			break;
		case PORTC_ID:
			value = PINC_REG.Byte;
    13ea:	e3 e3       	ldi	r30, 0x33	; 51
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	89 83       	std	Y+1, r24	; 0x01
    13f2:	04 c0       	rjmp	.+8      	; 0x13fc <GPIO_readPort+0x80>
			break;
		case PORTD_ID:
			value = PIND_REG.Byte;
    13f4:	e0 e3       	ldi	r30, 0x30	; 48
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return value;
    13fc:	99 81       	ldd	r25, Y+1	; 0x01
    13fe:	9d 83       	std	Y+5, r25	; 0x05
    1400:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1402:	0f 90       	pop	r0
    1404:	0f 90       	pop	r0
    1406:	0f 90       	pop	r0
    1408:	0f 90       	pop	r0
    140a:	0f 90       	pop	r0
    140c:	cf 91       	pop	r28
    140e:	df 91       	pop	r29
    1410:	08 95       	ret

00001412 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1412:	df 93       	push	r29
    1414:	cf 93       	push	r28
    1416:	cd b7       	in	r28, 0x3d	; 61
    1418:	de b7       	in	r29, 0x3e	; 62
    141a:	2e 97       	sbiw	r28, 0x0e	; 14
    141c:	0f b6       	in	r0, 0x3f	; 63
    141e:	f8 94       	cli
    1420:	de bf       	out	0x3e, r29	; 62
    1422:	0f be       	out	0x3f, r0	; 63
    1424:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	60 e0       	ldi	r22, 0x00	; 0
    142a:	41 e0       	ldi	r20, 0x01	; 1
    142c:	0e 94 c5 06 	call	0xd8a	; 0xd8a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	61 e0       	ldi	r22, 0x01	; 1
    1434:	41 e0       	ldi	r20, 0x01	; 1
    1436:	0e 94 c5 06 	call	0xd8a	; 0xd8a <GPIO_setupPinDirection>
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	a0 ea       	ldi	r26, 0xA0	; 160
    1440:	b1 e4       	ldi	r27, 0x41	; 65
    1442:	8b 87       	std	Y+11, r24	; 0x0b
    1444:	9c 87       	std	Y+12, r25	; 0x0c
    1446:	ad 87       	std	Y+13, r26	; 0x0d
    1448:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    144a:	6b 85       	ldd	r22, Y+11	; 0x0b
    144c:	7c 85       	ldd	r23, Y+12	; 0x0c
    144e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1450:	9e 85       	ldd	r25, Y+14	; 0x0e
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	4a e7       	ldi	r20, 0x7A	; 122
    1458:	55 e4       	ldi	r21, 0x45	; 69
    145a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    145e:	dc 01       	movw	r26, r24
    1460:	cb 01       	movw	r24, r22
    1462:	8f 83       	std	Y+7, r24	; 0x07
    1464:	98 87       	std	Y+8, r25	; 0x08
    1466:	a9 87       	std	Y+9, r26	; 0x09
    1468:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    146a:	6f 81       	ldd	r22, Y+7	; 0x07
    146c:	78 85       	ldd	r23, Y+8	; 0x08
    146e:	89 85       	ldd	r24, Y+9	; 0x09
    1470:	9a 85       	ldd	r25, Y+10	; 0x0a
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	40 e8       	ldi	r20, 0x80	; 128
    1478:	5f e3       	ldi	r21, 0x3F	; 63
    147a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    147e:	88 23       	and	r24, r24
    1480:	2c f4       	brge	.+10     	; 0x148c <LCD_init+0x7a>
		__ticks = 1;
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	9e 83       	std	Y+6, r25	; 0x06
    1488:	8d 83       	std	Y+5, r24	; 0x05
    148a:	3f c0       	rjmp	.+126    	; 0x150a <LCD_init+0xf8>
	else if (__tmp > 65535)
    148c:	6f 81       	ldd	r22, Y+7	; 0x07
    148e:	78 85       	ldd	r23, Y+8	; 0x08
    1490:	89 85       	ldd	r24, Y+9	; 0x09
    1492:	9a 85       	ldd	r25, Y+10	; 0x0a
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	3f ef       	ldi	r19, 0xFF	; 255
    1498:	4f e7       	ldi	r20, 0x7F	; 127
    149a:	57 e4       	ldi	r21, 0x47	; 71
    149c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    14a0:	18 16       	cp	r1, r24
    14a2:	4c f5       	brge	.+82     	; 0x14f6 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    14a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    14a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ac:	20 e0       	ldi	r18, 0x00	; 0
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	40 e2       	ldi	r20, 0x20	; 32
    14b2:	51 e4       	ldi	r21, 0x41	; 65
    14b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14b8:	dc 01       	movw	r26, r24
    14ba:	cb 01       	movw	r24, r22
    14bc:	bc 01       	movw	r22, r24
    14be:	cd 01       	movw	r24, r26
    14c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14c4:	dc 01       	movw	r26, r24
    14c6:	cb 01       	movw	r24, r22
    14c8:	9e 83       	std	Y+6, r25	; 0x06
    14ca:	8d 83       	std	Y+5, r24	; 0x05
    14cc:	0f c0       	rjmp	.+30     	; 0x14ec <LCD_init+0xda>
    14ce:	80 e9       	ldi	r24, 0x90	; 144
    14d0:	91 e0       	ldi	r25, 0x01	; 1
    14d2:	9c 83       	std	Y+4, r25	; 0x04
    14d4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	9c 81       	ldd	r25, Y+4	; 0x04
    14da:	01 97       	sbiw	r24, 0x01	; 1
    14dc:	f1 f7       	brne	.-4      	; 0x14da <LCD_init+0xc8>
    14de:	9c 83       	std	Y+4, r25	; 0x04
    14e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14e2:	8d 81       	ldd	r24, Y+5	; 0x05
    14e4:	9e 81       	ldd	r25, Y+6	; 0x06
    14e6:	01 97       	sbiw	r24, 0x01	; 1
    14e8:	9e 83       	std	Y+6, r25	; 0x06
    14ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ec:	8d 81       	ldd	r24, Y+5	; 0x05
    14ee:	9e 81       	ldd	r25, Y+6	; 0x06
    14f0:	00 97       	sbiw	r24, 0x00	; 0
    14f2:	69 f7       	brne	.-38     	; 0x14ce <LCD_init+0xbc>
    14f4:	14 c0       	rjmp	.+40     	; 0x151e <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f6:	6f 81       	ldd	r22, Y+7	; 0x07
    14f8:	78 85       	ldd	r23, Y+8	; 0x08
    14fa:	89 85       	ldd	r24, Y+9	; 0x09
    14fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    14fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1502:	dc 01       	movw	r26, r24
    1504:	cb 01       	movw	r24, r22
    1506:	9e 83       	std	Y+6, r25	; 0x06
    1508:	8d 83       	std	Y+5, r24	; 0x05
    150a:	8d 81       	ldd	r24, Y+5	; 0x05
    150c:	9e 81       	ldd	r25, Y+6	; 0x06
    150e:	9a 83       	std	Y+2, r25	; 0x02
    1510:	89 83       	std	Y+1, r24	; 0x01
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	9a 81       	ldd	r25, Y+2	; 0x02
    1516:	01 97       	sbiw	r24, 0x01	; 1
    1518:	f1 f7       	brne	.-4      	; 0x1516 <LCD_init+0x104>
    151a:	9a 83       	std	Y+2, r25	; 0x02
    151c:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	6f ef       	ldi	r22, 0xFF	; 255
    1522:	0e 94 36 09 	call	0x126c	; 0x126c <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1526:	88 e3       	ldi	r24, 0x38	; 56
    1528:	0e 94 a5 0a 	call	0x154a	; 0x154a <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    152c:	8c e0       	ldi	r24, 0x0C	; 12
    152e:	0e 94 a5 0a 	call	0x154a	; 0x154a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	0e 94 a5 0a 	call	0x154a	; 0x154a <LCD_sendCommand>
}
    1538:	2e 96       	adiw	r28, 0x0e	; 14
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	f8 94       	cli
    153e:	de bf       	out	0x3e, r29	; 62
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	cd bf       	out	0x3d, r28	; 61
    1544:	cf 91       	pop	r28
    1546:	df 91       	pop	r29
    1548:	08 95       	ret

0000154a <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 a_command)
{
    154a:	df 93       	push	r29
    154c:	cf 93       	push	r28
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
    1552:	e9 97       	sbiw	r28, 0x39	; 57
    1554:	0f b6       	in	r0, 0x3f	; 63
    1556:	f8 94       	cli
    1558:	de bf       	out	0x3e, r29	; 62
    155a:	0f be       	out	0x3f, r0	; 63
    155c:	cd bf       	out	0x3d, r28	; 61
    155e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW); /* Instruction Mode RS=0 */
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	60 e0       	ldi	r22, 0x00	; 0
    1564:	40 e0       	ldi	r20, 0x00	; 0
    1566:	0e 94 b0 07 	call	0xf60	; 0xf60 <GPIO_writePin>
    156a:	80 e0       	ldi	r24, 0x00	; 0
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	a0 e8       	ldi	r26, 0x80	; 128
    1570:	bf e3       	ldi	r27, 0x3F	; 63
    1572:	8d ab       	std	Y+53, r24	; 0x35
    1574:	9e ab       	std	Y+54, r25	; 0x36
    1576:	af ab       	std	Y+55, r26	; 0x37
    1578:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    157a:	6d a9       	ldd	r22, Y+53	; 0x35
    157c:	7e a9       	ldd	r23, Y+54	; 0x36
    157e:	8f a9       	ldd	r24, Y+55	; 0x37
    1580:	98 ad       	ldd	r25, Y+56	; 0x38
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	4a e7       	ldi	r20, 0x7A	; 122
    1588:	55 e4       	ldi	r21, 0x45	; 69
    158a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    158e:	dc 01       	movw	r26, r24
    1590:	cb 01       	movw	r24, r22
    1592:	89 ab       	std	Y+49, r24	; 0x31
    1594:	9a ab       	std	Y+50, r25	; 0x32
    1596:	ab ab       	std	Y+51, r26	; 0x33
    1598:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    159a:	69 a9       	ldd	r22, Y+49	; 0x31
    159c:	7a a9       	ldd	r23, Y+50	; 0x32
    159e:	8b a9       	ldd	r24, Y+51	; 0x33
    15a0:	9c a9       	ldd	r25, Y+52	; 0x34
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	40 e8       	ldi	r20, 0x80	; 128
    15a8:	5f e3       	ldi	r21, 0x3F	; 63
    15aa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    15ae:	88 23       	and	r24, r24
    15b0:	2c f4       	brge	.+10     	; 0x15bc <LCD_sendCommand+0x72>
		__ticks = 1;
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	98 ab       	std	Y+48, r25	; 0x30
    15b8:	8f a7       	std	Y+47, r24	; 0x2f
    15ba:	3f c0       	rjmp	.+126    	; 0x163a <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    15bc:	69 a9       	ldd	r22, Y+49	; 0x31
    15be:	7a a9       	ldd	r23, Y+50	; 0x32
    15c0:	8b a9       	ldd	r24, Y+51	; 0x33
    15c2:	9c a9       	ldd	r25, Y+52	; 0x34
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	3f ef       	ldi	r19, 0xFF	; 255
    15c8:	4f e7       	ldi	r20, 0x7F	; 127
    15ca:	57 e4       	ldi	r21, 0x47	; 71
    15cc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    15d0:	18 16       	cp	r1, r24
    15d2:	4c f5       	brge	.+82     	; 0x1626 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d4:	6d a9       	ldd	r22, Y+53	; 0x35
    15d6:	7e a9       	ldd	r23, Y+54	; 0x36
    15d8:	8f a9       	ldd	r24, Y+55	; 0x37
    15da:	98 ad       	ldd	r25, Y+56	; 0x38
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	40 e2       	ldi	r20, 0x20	; 32
    15e2:	51 e4       	ldi	r21, 0x41	; 65
    15e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15e8:	dc 01       	movw	r26, r24
    15ea:	cb 01       	movw	r24, r22
    15ec:	bc 01       	movw	r22, r24
    15ee:	cd 01       	movw	r24, r26
    15f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15f4:	dc 01       	movw	r26, r24
    15f6:	cb 01       	movw	r24, r22
    15f8:	98 ab       	std	Y+48, r25	; 0x30
    15fa:	8f a7       	std	Y+47, r24	; 0x2f
    15fc:	0f c0       	rjmp	.+30     	; 0x161c <LCD_sendCommand+0xd2>
    15fe:	80 e9       	ldi	r24, 0x90	; 144
    1600:	91 e0       	ldi	r25, 0x01	; 1
    1602:	9e a7       	std	Y+46, r25	; 0x2e
    1604:	8d a7       	std	Y+45, r24	; 0x2d
    1606:	8d a5       	ldd	r24, Y+45	; 0x2d
    1608:	9e a5       	ldd	r25, Y+46	; 0x2e
    160a:	01 97       	sbiw	r24, 0x01	; 1
    160c:	f1 f7       	brne	.-4      	; 0x160a <LCD_sendCommand+0xc0>
    160e:	9e a7       	std	Y+46, r25	; 0x2e
    1610:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1612:	8f a5       	ldd	r24, Y+47	; 0x2f
    1614:	98 a9       	ldd	r25, Y+48	; 0x30
    1616:	01 97       	sbiw	r24, 0x01	; 1
    1618:	98 ab       	std	Y+48, r25	; 0x30
    161a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    161c:	8f a5       	ldd	r24, Y+47	; 0x2f
    161e:	98 a9       	ldd	r25, Y+48	; 0x30
    1620:	00 97       	sbiw	r24, 0x00	; 0
    1622:	69 f7       	brne	.-38     	; 0x15fe <LCD_sendCommand+0xb4>
    1624:	14 c0       	rjmp	.+40     	; 0x164e <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1626:	69 a9       	ldd	r22, Y+49	; 0x31
    1628:	7a a9       	ldd	r23, Y+50	; 0x32
    162a:	8b a9       	ldd	r24, Y+51	; 0x33
    162c:	9c a9       	ldd	r25, Y+52	; 0x34
    162e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1632:	dc 01       	movw	r26, r24
    1634:	cb 01       	movw	r24, r22
    1636:	98 ab       	std	Y+48, r25	; 0x30
    1638:	8f a7       	std	Y+47, r24	; 0x2f
    163a:	8f a5       	ldd	r24, Y+47	; 0x2f
    163c:	98 a9       	ldd	r25, Y+48	; 0x30
    163e:	9c a7       	std	Y+44, r25	; 0x2c
    1640:	8b a7       	std	Y+43, r24	; 0x2b
    1642:	8b a5       	ldd	r24, Y+43	; 0x2b
    1644:	9c a5       	ldd	r25, Y+44	; 0x2c
    1646:	01 97       	sbiw	r24, 0x01	; 1
    1648:	f1 f7       	brne	.-4      	; 0x1646 <LCD_sendCommand+0xfc>
    164a:	9c a7       	std	Y+44, r25	; 0x2c
    164c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	61 e0       	ldi	r22, 0x01	; 1
    1652:	41 e0       	ldi	r20, 0x01	; 1
    1654:	0e 94 b0 07 	call	0xf60	; 0xf60 <GPIO_writePin>
    1658:	80 e0       	ldi	r24, 0x00	; 0
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	a0 e8       	ldi	r26, 0x80	; 128
    165e:	bf e3       	ldi	r27, 0x3F	; 63
    1660:	8f a3       	std	Y+39, r24	; 0x27
    1662:	98 a7       	std	Y+40, r25	; 0x28
    1664:	a9 a7       	std	Y+41, r26	; 0x29
    1666:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1668:	6f a1       	ldd	r22, Y+39	; 0x27
    166a:	78 a5       	ldd	r23, Y+40	; 0x28
    166c:	89 a5       	ldd	r24, Y+41	; 0x29
    166e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1670:	20 e0       	ldi	r18, 0x00	; 0
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	4a e7       	ldi	r20, 0x7A	; 122
    1676:	55 e4       	ldi	r21, 0x45	; 69
    1678:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    167c:	dc 01       	movw	r26, r24
    167e:	cb 01       	movw	r24, r22
    1680:	8b a3       	std	Y+35, r24	; 0x23
    1682:	9c a3       	std	Y+36, r25	; 0x24
    1684:	ad a3       	std	Y+37, r26	; 0x25
    1686:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1688:	6b a1       	ldd	r22, Y+35	; 0x23
    168a:	7c a1       	ldd	r23, Y+36	; 0x24
    168c:	8d a1       	ldd	r24, Y+37	; 0x25
    168e:	9e a1       	ldd	r25, Y+38	; 0x26
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	40 e8       	ldi	r20, 0x80	; 128
    1696:	5f e3       	ldi	r21, 0x3F	; 63
    1698:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    169c:	88 23       	and	r24, r24
    169e:	2c f4       	brge	.+10     	; 0x16aa <LCD_sendCommand+0x160>
		__ticks = 1;
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	9a a3       	std	Y+34, r25	; 0x22
    16a6:	89 a3       	std	Y+33, r24	; 0x21
    16a8:	3f c0       	rjmp	.+126    	; 0x1728 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    16aa:	6b a1       	ldd	r22, Y+35	; 0x23
    16ac:	7c a1       	ldd	r23, Y+36	; 0x24
    16ae:	8d a1       	ldd	r24, Y+37	; 0x25
    16b0:	9e a1       	ldd	r25, Y+38	; 0x26
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	3f ef       	ldi	r19, 0xFF	; 255
    16b6:	4f e7       	ldi	r20, 0x7F	; 127
    16b8:	57 e4       	ldi	r21, 0x47	; 71
    16ba:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    16be:	18 16       	cp	r1, r24
    16c0:	4c f5       	brge	.+82     	; 0x1714 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16c2:	6f a1       	ldd	r22, Y+39	; 0x27
    16c4:	78 a5       	ldd	r23, Y+40	; 0x28
    16c6:	89 a5       	ldd	r24, Y+41	; 0x29
    16c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    16ca:	20 e0       	ldi	r18, 0x00	; 0
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	40 e2       	ldi	r20, 0x20	; 32
    16d0:	51 e4       	ldi	r21, 0x41	; 65
    16d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16d6:	dc 01       	movw	r26, r24
    16d8:	cb 01       	movw	r24, r22
    16da:	bc 01       	movw	r22, r24
    16dc:	cd 01       	movw	r24, r26
    16de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16e2:	dc 01       	movw	r26, r24
    16e4:	cb 01       	movw	r24, r22
    16e6:	9a a3       	std	Y+34, r25	; 0x22
    16e8:	89 a3       	std	Y+33, r24	; 0x21
    16ea:	0f c0       	rjmp	.+30     	; 0x170a <LCD_sendCommand+0x1c0>
    16ec:	80 e9       	ldi	r24, 0x90	; 144
    16ee:	91 e0       	ldi	r25, 0x01	; 1
    16f0:	98 a3       	std	Y+32, r25	; 0x20
    16f2:	8f 8f       	std	Y+31, r24	; 0x1f
    16f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16f6:	98 a1       	ldd	r25, Y+32	; 0x20
    16f8:	01 97       	sbiw	r24, 0x01	; 1
    16fa:	f1 f7       	brne	.-4      	; 0x16f8 <LCD_sendCommand+0x1ae>
    16fc:	98 a3       	std	Y+32, r25	; 0x20
    16fe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1700:	89 a1       	ldd	r24, Y+33	; 0x21
    1702:	9a a1       	ldd	r25, Y+34	; 0x22
    1704:	01 97       	sbiw	r24, 0x01	; 1
    1706:	9a a3       	std	Y+34, r25	; 0x22
    1708:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    170a:	89 a1       	ldd	r24, Y+33	; 0x21
    170c:	9a a1       	ldd	r25, Y+34	; 0x22
    170e:	00 97       	sbiw	r24, 0x00	; 0
    1710:	69 f7       	brne	.-38     	; 0x16ec <LCD_sendCommand+0x1a2>
    1712:	14 c0       	rjmp	.+40     	; 0x173c <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1714:	6b a1       	ldd	r22, Y+35	; 0x23
    1716:	7c a1       	ldd	r23, Y+36	; 0x24
    1718:	8d a1       	ldd	r24, Y+37	; 0x25
    171a:	9e a1       	ldd	r25, Y+38	; 0x26
    171c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1720:	dc 01       	movw	r26, r24
    1722:	cb 01       	movw	r24, r22
    1724:	9a a3       	std	Y+34, r25	; 0x22
    1726:	89 a3       	std	Y+33, r24	; 0x21
    1728:	89 a1       	ldd	r24, Y+33	; 0x21
    172a:	9a a1       	ldd	r25, Y+34	; 0x22
    172c:	9e 8f       	std	Y+30, r25	; 0x1e
    172e:	8d 8f       	std	Y+29, r24	; 0x1d
    1730:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1732:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1734:	01 97       	sbiw	r24, 0x01	; 1
    1736:	f1 f7       	brne	.-4      	; 0x1734 <LCD_sendCommand+0x1ea>
    1738:	9e 8f       	std	Y+30, r25	; 0x1e
    173a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID, a_command); /* out the required command to the data bus D0 --> D7 */
    173c:	80 e0       	ldi	r24, 0x00	; 0
    173e:	69 ad       	ldd	r22, Y+57	; 0x39
    1740:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <GPIO_writePort>
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	a0 e8       	ldi	r26, 0x80	; 128
    174a:	bf e3       	ldi	r27, 0x3F	; 63
    174c:	89 8f       	std	Y+25, r24	; 0x19
    174e:	9a 8f       	std	Y+26, r25	; 0x1a
    1750:	ab 8f       	std	Y+27, r26	; 0x1b
    1752:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1754:	69 8d       	ldd	r22, Y+25	; 0x19
    1756:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1758:	8b 8d       	ldd	r24, Y+27	; 0x1b
    175a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	4a e7       	ldi	r20, 0x7A	; 122
    1762:	55 e4       	ldi	r21, 0x45	; 69
    1764:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1768:	dc 01       	movw	r26, r24
    176a:	cb 01       	movw	r24, r22
    176c:	8d 8b       	std	Y+21, r24	; 0x15
    176e:	9e 8b       	std	Y+22, r25	; 0x16
    1770:	af 8b       	std	Y+23, r26	; 0x17
    1772:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1774:	6d 89       	ldd	r22, Y+21	; 0x15
    1776:	7e 89       	ldd	r23, Y+22	; 0x16
    1778:	8f 89       	ldd	r24, Y+23	; 0x17
    177a:	98 8d       	ldd	r25, Y+24	; 0x18
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	40 e8       	ldi	r20, 0x80	; 128
    1782:	5f e3       	ldi	r21, 0x3F	; 63
    1784:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1788:	88 23       	and	r24, r24
    178a:	2c f4       	brge	.+10     	; 0x1796 <LCD_sendCommand+0x24c>
		__ticks = 1;
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	9c 8b       	std	Y+20, r25	; 0x14
    1792:	8b 8b       	std	Y+19, r24	; 0x13
    1794:	3f c0       	rjmp	.+126    	; 0x1814 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1796:	6d 89       	ldd	r22, Y+21	; 0x15
    1798:	7e 89       	ldd	r23, Y+22	; 0x16
    179a:	8f 89       	ldd	r24, Y+23	; 0x17
    179c:	98 8d       	ldd	r25, Y+24	; 0x18
    179e:	20 e0       	ldi	r18, 0x00	; 0
    17a0:	3f ef       	ldi	r19, 0xFF	; 255
    17a2:	4f e7       	ldi	r20, 0x7F	; 127
    17a4:	57 e4       	ldi	r21, 0x47	; 71
    17a6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    17aa:	18 16       	cp	r1, r24
    17ac:	4c f5       	brge	.+82     	; 0x1800 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ae:	69 8d       	ldd	r22, Y+25	; 0x19
    17b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	40 e2       	ldi	r20, 0x20	; 32
    17bc:	51 e4       	ldi	r21, 0x41	; 65
    17be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17c2:	dc 01       	movw	r26, r24
    17c4:	cb 01       	movw	r24, r22
    17c6:	bc 01       	movw	r22, r24
    17c8:	cd 01       	movw	r24, r26
    17ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17ce:	dc 01       	movw	r26, r24
    17d0:	cb 01       	movw	r24, r22
    17d2:	9c 8b       	std	Y+20, r25	; 0x14
    17d4:	8b 8b       	std	Y+19, r24	; 0x13
    17d6:	0f c0       	rjmp	.+30     	; 0x17f6 <LCD_sendCommand+0x2ac>
    17d8:	80 e9       	ldi	r24, 0x90	; 144
    17da:	91 e0       	ldi	r25, 0x01	; 1
    17dc:	9a 8b       	std	Y+18, r25	; 0x12
    17de:	89 8b       	std	Y+17, r24	; 0x11
    17e0:	89 89       	ldd	r24, Y+17	; 0x11
    17e2:	9a 89       	ldd	r25, Y+18	; 0x12
    17e4:	01 97       	sbiw	r24, 0x01	; 1
    17e6:	f1 f7       	brne	.-4      	; 0x17e4 <LCD_sendCommand+0x29a>
    17e8:	9a 8b       	std	Y+18, r25	; 0x12
    17ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ec:	8b 89       	ldd	r24, Y+19	; 0x13
    17ee:	9c 89       	ldd	r25, Y+20	; 0x14
    17f0:	01 97       	sbiw	r24, 0x01	; 1
    17f2:	9c 8b       	std	Y+20, r25	; 0x14
    17f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17f6:	8b 89       	ldd	r24, Y+19	; 0x13
    17f8:	9c 89       	ldd	r25, Y+20	; 0x14
    17fa:	00 97       	sbiw	r24, 0x00	; 0
    17fc:	69 f7       	brne	.-38     	; 0x17d8 <LCD_sendCommand+0x28e>
    17fe:	14 c0       	rjmp	.+40     	; 0x1828 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1800:	6d 89       	ldd	r22, Y+21	; 0x15
    1802:	7e 89       	ldd	r23, Y+22	; 0x16
    1804:	8f 89       	ldd	r24, Y+23	; 0x17
    1806:	98 8d       	ldd	r25, Y+24	; 0x18
    1808:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    180c:	dc 01       	movw	r26, r24
    180e:	cb 01       	movw	r24, r22
    1810:	9c 8b       	std	Y+20, r25	; 0x14
    1812:	8b 8b       	std	Y+19, r24	; 0x13
    1814:	8b 89       	ldd	r24, Y+19	; 0x13
    1816:	9c 89       	ldd	r25, Y+20	; 0x14
    1818:	98 8b       	std	Y+16, r25	; 0x10
    181a:	8f 87       	std	Y+15, r24	; 0x0f
    181c:	8f 85       	ldd	r24, Y+15	; 0x0f
    181e:	98 89       	ldd	r25, Y+16	; 0x10
    1820:	01 97       	sbiw	r24, 0x01	; 1
    1822:	f1 f7       	brne	.-4      	; 0x1820 <LCD_sendCommand+0x2d6>
    1824:	98 8b       	std	Y+16, r25	; 0x10
    1826:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	61 e0       	ldi	r22, 0x01	; 1
    182c:	40 e0       	ldi	r20, 0x00	; 0
    182e:	0e 94 b0 07 	call	0xf60	; 0xf60 <GPIO_writePin>
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	a0 e8       	ldi	r26, 0x80	; 128
    1838:	bf e3       	ldi	r27, 0x3F	; 63
    183a:	8b 87       	std	Y+11, r24	; 0x0b
    183c:	9c 87       	std	Y+12, r25	; 0x0c
    183e:	ad 87       	std	Y+13, r26	; 0x0d
    1840:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1842:	6b 85       	ldd	r22, Y+11	; 0x0b
    1844:	7c 85       	ldd	r23, Y+12	; 0x0c
    1846:	8d 85       	ldd	r24, Y+13	; 0x0d
    1848:	9e 85       	ldd	r25, Y+14	; 0x0e
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	4a e7       	ldi	r20, 0x7A	; 122
    1850:	55 e4       	ldi	r21, 0x45	; 69
    1852:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	8f 83       	std	Y+7, r24	; 0x07
    185c:	98 87       	std	Y+8, r25	; 0x08
    185e:	a9 87       	std	Y+9, r26	; 0x09
    1860:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1862:	6f 81       	ldd	r22, Y+7	; 0x07
    1864:	78 85       	ldd	r23, Y+8	; 0x08
    1866:	89 85       	ldd	r24, Y+9	; 0x09
    1868:	9a 85       	ldd	r25, Y+10	; 0x0a
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	40 e8       	ldi	r20, 0x80	; 128
    1870:	5f e3       	ldi	r21, 0x3F	; 63
    1872:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1876:	88 23       	and	r24, r24
    1878:	2c f4       	brge	.+10     	; 0x1884 <LCD_sendCommand+0x33a>
		__ticks = 1;
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	9e 83       	std	Y+6, r25	; 0x06
    1880:	8d 83       	std	Y+5, r24	; 0x05
    1882:	3f c0       	rjmp	.+126    	; 0x1902 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1884:	6f 81       	ldd	r22, Y+7	; 0x07
    1886:	78 85       	ldd	r23, Y+8	; 0x08
    1888:	89 85       	ldd	r24, Y+9	; 0x09
    188a:	9a 85       	ldd	r25, Y+10	; 0x0a
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	3f ef       	ldi	r19, 0xFF	; 255
    1890:	4f e7       	ldi	r20, 0x7F	; 127
    1892:	57 e4       	ldi	r21, 0x47	; 71
    1894:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1898:	18 16       	cp	r1, r24
    189a:	4c f5       	brge	.+82     	; 0x18ee <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    189c:	6b 85       	ldd	r22, Y+11	; 0x0b
    189e:	7c 85       	ldd	r23, Y+12	; 0x0c
    18a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    18a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	40 e2       	ldi	r20, 0x20	; 32
    18aa:	51 e4       	ldi	r21, 0x41	; 65
    18ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	bc 01       	movw	r22, r24
    18b6:	cd 01       	movw	r24, r26
    18b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18bc:	dc 01       	movw	r26, r24
    18be:	cb 01       	movw	r24, r22
    18c0:	9e 83       	std	Y+6, r25	; 0x06
    18c2:	8d 83       	std	Y+5, r24	; 0x05
    18c4:	0f c0       	rjmp	.+30     	; 0x18e4 <LCD_sendCommand+0x39a>
    18c6:	80 e9       	ldi	r24, 0x90	; 144
    18c8:	91 e0       	ldi	r25, 0x01	; 1
    18ca:	9c 83       	std	Y+4, r25	; 0x04
    18cc:	8b 83       	std	Y+3, r24	; 0x03
    18ce:	8b 81       	ldd	r24, Y+3	; 0x03
    18d0:	9c 81       	ldd	r25, Y+4	; 0x04
    18d2:	01 97       	sbiw	r24, 0x01	; 1
    18d4:	f1 f7       	brne	.-4      	; 0x18d2 <LCD_sendCommand+0x388>
    18d6:	9c 83       	std	Y+4, r25	; 0x04
    18d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18da:	8d 81       	ldd	r24, Y+5	; 0x05
    18dc:	9e 81       	ldd	r25, Y+6	; 0x06
    18de:	01 97       	sbiw	r24, 0x01	; 1
    18e0:	9e 83       	std	Y+6, r25	; 0x06
    18e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18e4:	8d 81       	ldd	r24, Y+5	; 0x05
    18e6:	9e 81       	ldd	r25, Y+6	; 0x06
    18e8:	00 97       	sbiw	r24, 0x00	; 0
    18ea:	69 f7       	brne	.-38     	; 0x18c6 <LCD_sendCommand+0x37c>
    18ec:	14 c0       	rjmp	.+40     	; 0x1916 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ee:	6f 81       	ldd	r22, Y+7	; 0x07
    18f0:	78 85       	ldd	r23, Y+8	; 0x08
    18f2:	89 85       	ldd	r24, Y+9	; 0x09
    18f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	9e 83       	std	Y+6, r25	; 0x06
    1900:	8d 83       	std	Y+5, r24	; 0x05
    1902:	8d 81       	ldd	r24, Y+5	; 0x05
    1904:	9e 81       	ldd	r25, Y+6	; 0x06
    1906:	9a 83       	std	Y+2, r25	; 0x02
    1908:	89 83       	std	Y+1, r24	; 0x01
    190a:	89 81       	ldd	r24, Y+1	; 0x01
    190c:	9a 81       	ldd	r25, Y+2	; 0x02
    190e:	01 97       	sbiw	r24, 0x01	; 1
    1910:	f1 f7       	brne	.-4      	; 0x190e <LCD_sendCommand+0x3c4>
    1912:	9a 83       	std	Y+2, r25	; 0x02
    1914:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1916:	e9 96       	adiw	r28, 0x39	; 57
    1918:	0f b6       	in	r0, 0x3f	; 63
    191a:	f8 94       	cli
    191c:	de bf       	out	0x3e, r29	; 62
    191e:	0f be       	out	0x3f, r0	; 63
    1920:	cd bf       	out	0x3d, r28	; 61
    1922:	cf 91       	pop	r28
    1924:	df 91       	pop	r29
    1926:	08 95       	ret

00001928 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 a_data)
{
    1928:	df 93       	push	r29
    192a:	cf 93       	push	r28
    192c:	cd b7       	in	r28, 0x3d	; 61
    192e:	de b7       	in	r29, 0x3e	; 62
    1930:	e9 97       	sbiw	r28, 0x39	; 57
    1932:	0f b6       	in	r0, 0x3f	; 63
    1934:	f8 94       	cli
    1936:	de bf       	out	0x3e, r29	; 62
    1938:	0f be       	out	0x3f, r0	; 63
    193a:	cd bf       	out	0x3d, r28	; 61
    193c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH); /* Data Mode RS=1 */
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	60 e0       	ldi	r22, 0x00	; 0
    1942:	41 e0       	ldi	r20, 0x01	; 1
    1944:	0e 94 b0 07 	call	0xf60	; 0xf60 <GPIO_writePin>
    1948:	80 e0       	ldi	r24, 0x00	; 0
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	a0 e8       	ldi	r26, 0x80	; 128
    194e:	bf e3       	ldi	r27, 0x3F	; 63
    1950:	8d ab       	std	Y+53, r24	; 0x35
    1952:	9e ab       	std	Y+54, r25	; 0x36
    1954:	af ab       	std	Y+55, r26	; 0x37
    1956:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1958:	6d a9       	ldd	r22, Y+53	; 0x35
    195a:	7e a9       	ldd	r23, Y+54	; 0x36
    195c:	8f a9       	ldd	r24, Y+55	; 0x37
    195e:	98 ad       	ldd	r25, Y+56	; 0x38
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	4a e7       	ldi	r20, 0x7A	; 122
    1966:	55 e4       	ldi	r21, 0x45	; 69
    1968:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    196c:	dc 01       	movw	r26, r24
    196e:	cb 01       	movw	r24, r22
    1970:	89 ab       	std	Y+49, r24	; 0x31
    1972:	9a ab       	std	Y+50, r25	; 0x32
    1974:	ab ab       	std	Y+51, r26	; 0x33
    1976:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1978:	69 a9       	ldd	r22, Y+49	; 0x31
    197a:	7a a9       	ldd	r23, Y+50	; 0x32
    197c:	8b a9       	ldd	r24, Y+51	; 0x33
    197e:	9c a9       	ldd	r25, Y+52	; 0x34
    1980:	20 e0       	ldi	r18, 0x00	; 0
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	40 e8       	ldi	r20, 0x80	; 128
    1986:	5f e3       	ldi	r21, 0x3F	; 63
    1988:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    198c:	88 23       	and	r24, r24
    198e:	2c f4       	brge	.+10     	; 0x199a <LCD_displayCharacter+0x72>
		__ticks = 1;
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	98 ab       	std	Y+48, r25	; 0x30
    1996:	8f a7       	std	Y+47, r24	; 0x2f
    1998:	3f c0       	rjmp	.+126    	; 0x1a18 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    199a:	69 a9       	ldd	r22, Y+49	; 0x31
    199c:	7a a9       	ldd	r23, Y+50	; 0x32
    199e:	8b a9       	ldd	r24, Y+51	; 0x33
    19a0:	9c a9       	ldd	r25, Y+52	; 0x34
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	3f ef       	ldi	r19, 0xFF	; 255
    19a6:	4f e7       	ldi	r20, 0x7F	; 127
    19a8:	57 e4       	ldi	r21, 0x47	; 71
    19aa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19ae:	18 16       	cp	r1, r24
    19b0:	4c f5       	brge	.+82     	; 0x1a04 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19b2:	6d a9       	ldd	r22, Y+53	; 0x35
    19b4:	7e a9       	ldd	r23, Y+54	; 0x36
    19b6:	8f a9       	ldd	r24, Y+55	; 0x37
    19b8:	98 ad       	ldd	r25, Y+56	; 0x38
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	40 e2       	ldi	r20, 0x20	; 32
    19c0:	51 e4       	ldi	r21, 0x41	; 65
    19c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	bc 01       	movw	r22, r24
    19cc:	cd 01       	movw	r24, r26
    19ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19d2:	dc 01       	movw	r26, r24
    19d4:	cb 01       	movw	r24, r22
    19d6:	98 ab       	std	Y+48, r25	; 0x30
    19d8:	8f a7       	std	Y+47, r24	; 0x2f
    19da:	0f c0       	rjmp	.+30     	; 0x19fa <LCD_displayCharacter+0xd2>
    19dc:	80 e9       	ldi	r24, 0x90	; 144
    19de:	91 e0       	ldi	r25, 0x01	; 1
    19e0:	9e a7       	std	Y+46, r25	; 0x2e
    19e2:	8d a7       	std	Y+45, r24	; 0x2d
    19e4:	8d a5       	ldd	r24, Y+45	; 0x2d
    19e6:	9e a5       	ldd	r25, Y+46	; 0x2e
    19e8:	01 97       	sbiw	r24, 0x01	; 1
    19ea:	f1 f7       	brne	.-4      	; 0x19e8 <LCD_displayCharacter+0xc0>
    19ec:	9e a7       	std	Y+46, r25	; 0x2e
    19ee:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    19f2:	98 a9       	ldd	r25, Y+48	; 0x30
    19f4:	01 97       	sbiw	r24, 0x01	; 1
    19f6:	98 ab       	std	Y+48, r25	; 0x30
    19f8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    19fc:	98 a9       	ldd	r25, Y+48	; 0x30
    19fe:	00 97       	sbiw	r24, 0x00	; 0
    1a00:	69 f7       	brne	.-38     	; 0x19dc <LCD_displayCharacter+0xb4>
    1a02:	14 c0       	rjmp	.+40     	; 0x1a2c <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a04:	69 a9       	ldd	r22, Y+49	; 0x31
    1a06:	7a a9       	ldd	r23, Y+50	; 0x32
    1a08:	8b a9       	ldd	r24, Y+51	; 0x33
    1a0a:	9c a9       	ldd	r25, Y+52	; 0x34
    1a0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a10:	dc 01       	movw	r26, r24
    1a12:	cb 01       	movw	r24, r22
    1a14:	98 ab       	std	Y+48, r25	; 0x30
    1a16:	8f a7       	std	Y+47, r24	; 0x2f
    1a18:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a1a:	98 a9       	ldd	r25, Y+48	; 0x30
    1a1c:	9c a7       	std	Y+44, r25	; 0x2c
    1a1e:	8b a7       	std	Y+43, r24	; 0x2b
    1a20:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a22:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a24:	01 97       	sbiw	r24, 0x01	; 1
    1a26:	f1 f7       	brne	.-4      	; 0x1a24 <LCD_displayCharacter+0xfc>
    1a28:	9c a7       	std	Y+44, r25	; 0x2c
    1a2a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	61 e0       	ldi	r22, 0x01	; 1
    1a30:	41 e0       	ldi	r20, 0x01	; 1
    1a32:	0e 94 b0 07 	call	0xf60	; 0xf60 <GPIO_writePin>
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	a0 e8       	ldi	r26, 0x80	; 128
    1a3c:	bf e3       	ldi	r27, 0x3F	; 63
    1a3e:	8f a3       	std	Y+39, r24	; 0x27
    1a40:	98 a7       	std	Y+40, r25	; 0x28
    1a42:	a9 a7       	std	Y+41, r26	; 0x29
    1a44:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a46:	6f a1       	ldd	r22, Y+39	; 0x27
    1a48:	78 a5       	ldd	r23, Y+40	; 0x28
    1a4a:	89 a5       	ldd	r24, Y+41	; 0x29
    1a4c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	4a e7       	ldi	r20, 0x7A	; 122
    1a54:	55 e4       	ldi	r21, 0x45	; 69
    1a56:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	8b a3       	std	Y+35, r24	; 0x23
    1a60:	9c a3       	std	Y+36, r25	; 0x24
    1a62:	ad a3       	std	Y+37, r26	; 0x25
    1a64:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a66:	6b a1       	ldd	r22, Y+35	; 0x23
    1a68:	7c a1       	ldd	r23, Y+36	; 0x24
    1a6a:	8d a1       	ldd	r24, Y+37	; 0x25
    1a6c:	9e a1       	ldd	r25, Y+38	; 0x26
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	40 e8       	ldi	r20, 0x80	; 128
    1a74:	5f e3       	ldi	r21, 0x3F	; 63
    1a76:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a7a:	88 23       	and	r24, r24
    1a7c:	2c f4       	brge	.+10     	; 0x1a88 <LCD_displayCharacter+0x160>
		__ticks = 1;
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	9a a3       	std	Y+34, r25	; 0x22
    1a84:	89 a3       	std	Y+33, r24	; 0x21
    1a86:	3f c0       	rjmp	.+126    	; 0x1b06 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1a88:	6b a1       	ldd	r22, Y+35	; 0x23
    1a8a:	7c a1       	ldd	r23, Y+36	; 0x24
    1a8c:	8d a1       	ldd	r24, Y+37	; 0x25
    1a8e:	9e a1       	ldd	r25, Y+38	; 0x26
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	3f ef       	ldi	r19, 0xFF	; 255
    1a94:	4f e7       	ldi	r20, 0x7F	; 127
    1a96:	57 e4       	ldi	r21, 0x47	; 71
    1a98:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a9c:	18 16       	cp	r1, r24
    1a9e:	4c f5       	brge	.+82     	; 0x1af2 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aa0:	6f a1       	ldd	r22, Y+39	; 0x27
    1aa2:	78 a5       	ldd	r23, Y+40	; 0x28
    1aa4:	89 a5       	ldd	r24, Y+41	; 0x29
    1aa6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	40 e2       	ldi	r20, 0x20	; 32
    1aae:	51 e4       	ldi	r21, 0x41	; 65
    1ab0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	bc 01       	movw	r22, r24
    1aba:	cd 01       	movw	r24, r26
    1abc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	cb 01       	movw	r24, r22
    1ac4:	9a a3       	std	Y+34, r25	; 0x22
    1ac6:	89 a3       	std	Y+33, r24	; 0x21
    1ac8:	0f c0       	rjmp	.+30     	; 0x1ae8 <LCD_displayCharacter+0x1c0>
    1aca:	80 e9       	ldi	r24, 0x90	; 144
    1acc:	91 e0       	ldi	r25, 0x01	; 1
    1ace:	98 a3       	std	Y+32, r25	; 0x20
    1ad0:	8f 8f       	std	Y+31, r24	; 0x1f
    1ad2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ad4:	98 a1       	ldd	r25, Y+32	; 0x20
    1ad6:	01 97       	sbiw	r24, 0x01	; 1
    1ad8:	f1 f7       	brne	.-4      	; 0x1ad6 <LCD_displayCharacter+0x1ae>
    1ada:	98 a3       	std	Y+32, r25	; 0x20
    1adc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ade:	89 a1       	ldd	r24, Y+33	; 0x21
    1ae0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ae2:	01 97       	sbiw	r24, 0x01	; 1
    1ae4:	9a a3       	std	Y+34, r25	; 0x22
    1ae6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae8:	89 a1       	ldd	r24, Y+33	; 0x21
    1aea:	9a a1       	ldd	r25, Y+34	; 0x22
    1aec:	00 97       	sbiw	r24, 0x00	; 0
    1aee:	69 f7       	brne	.-38     	; 0x1aca <LCD_displayCharacter+0x1a2>
    1af0:	14 c0       	rjmp	.+40     	; 0x1b1a <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1af2:	6b a1       	ldd	r22, Y+35	; 0x23
    1af4:	7c a1       	ldd	r23, Y+36	; 0x24
    1af6:	8d a1       	ldd	r24, Y+37	; 0x25
    1af8:	9e a1       	ldd	r25, Y+38	; 0x26
    1afa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	9a a3       	std	Y+34, r25	; 0x22
    1b04:	89 a3       	std	Y+33, r24	; 0x21
    1b06:	89 a1       	ldd	r24, Y+33	; 0x21
    1b08:	9a a1       	ldd	r25, Y+34	; 0x22
    1b0a:	9e 8f       	std	Y+30, r25	; 0x1e
    1b0c:	8d 8f       	std	Y+29, r24	; 0x1d
    1b0e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b10:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b12:	01 97       	sbiw	r24, 0x01	; 1
    1b14:	f1 f7       	brne	.-4      	; 0x1b12 <LCD_displayCharacter+0x1ea>
    1b16:	9e 8f       	std	Y+30, r25	; 0x1e
    1b18:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID, a_data); /* out the required command to the data bus D0 --> D7 */
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	69 ad       	ldd	r22, Y+57	; 0x39
    1b1e:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <GPIO_writePort>
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	a0 e8       	ldi	r26, 0x80	; 128
    1b28:	bf e3       	ldi	r27, 0x3F	; 63
    1b2a:	89 8f       	std	Y+25, r24	; 0x19
    1b2c:	9a 8f       	std	Y+26, r25	; 0x1a
    1b2e:	ab 8f       	std	Y+27, r26	; 0x1b
    1b30:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b32:	69 8d       	ldd	r22, Y+25	; 0x19
    1b34:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	4a e7       	ldi	r20, 0x7A	; 122
    1b40:	55 e4       	ldi	r21, 0x45	; 69
    1b42:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	8d 8b       	std	Y+21, r24	; 0x15
    1b4c:	9e 8b       	std	Y+22, r25	; 0x16
    1b4e:	af 8b       	std	Y+23, r26	; 0x17
    1b50:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b52:	6d 89       	ldd	r22, Y+21	; 0x15
    1b54:	7e 89       	ldd	r23, Y+22	; 0x16
    1b56:	8f 89       	ldd	r24, Y+23	; 0x17
    1b58:	98 8d       	ldd	r25, Y+24	; 0x18
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	40 e8       	ldi	r20, 0x80	; 128
    1b60:	5f e3       	ldi	r21, 0x3F	; 63
    1b62:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b66:	88 23       	and	r24, r24
    1b68:	2c f4       	brge	.+10     	; 0x1b74 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	9c 8b       	std	Y+20, r25	; 0x14
    1b70:	8b 8b       	std	Y+19, r24	; 0x13
    1b72:	3f c0       	rjmp	.+126    	; 0x1bf2 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1b74:	6d 89       	ldd	r22, Y+21	; 0x15
    1b76:	7e 89       	ldd	r23, Y+22	; 0x16
    1b78:	8f 89       	ldd	r24, Y+23	; 0x17
    1b7a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	3f ef       	ldi	r19, 0xFF	; 255
    1b80:	4f e7       	ldi	r20, 0x7F	; 127
    1b82:	57 e4       	ldi	r21, 0x47	; 71
    1b84:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b88:	18 16       	cp	r1, r24
    1b8a:	4c f5       	brge	.+82     	; 0x1bde <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b8c:	69 8d       	ldd	r22, Y+25	; 0x19
    1b8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	40 e2       	ldi	r20, 0x20	; 32
    1b9a:	51 e4       	ldi	r21, 0x41	; 65
    1b9c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	bc 01       	movw	r22, r24
    1ba6:	cd 01       	movw	r24, r26
    1ba8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	9c 8b       	std	Y+20, r25	; 0x14
    1bb2:	8b 8b       	std	Y+19, r24	; 0x13
    1bb4:	0f c0       	rjmp	.+30     	; 0x1bd4 <LCD_displayCharacter+0x2ac>
    1bb6:	80 e9       	ldi	r24, 0x90	; 144
    1bb8:	91 e0       	ldi	r25, 0x01	; 1
    1bba:	9a 8b       	std	Y+18, r25	; 0x12
    1bbc:	89 8b       	std	Y+17, r24	; 0x11
    1bbe:	89 89       	ldd	r24, Y+17	; 0x11
    1bc0:	9a 89       	ldd	r25, Y+18	; 0x12
    1bc2:	01 97       	sbiw	r24, 0x01	; 1
    1bc4:	f1 f7       	brne	.-4      	; 0x1bc2 <LCD_displayCharacter+0x29a>
    1bc6:	9a 8b       	std	Y+18, r25	; 0x12
    1bc8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bca:	8b 89       	ldd	r24, Y+19	; 0x13
    1bcc:	9c 89       	ldd	r25, Y+20	; 0x14
    1bce:	01 97       	sbiw	r24, 0x01	; 1
    1bd0:	9c 8b       	std	Y+20, r25	; 0x14
    1bd2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd4:	8b 89       	ldd	r24, Y+19	; 0x13
    1bd6:	9c 89       	ldd	r25, Y+20	; 0x14
    1bd8:	00 97       	sbiw	r24, 0x00	; 0
    1bda:	69 f7       	brne	.-38     	; 0x1bb6 <LCD_displayCharacter+0x28e>
    1bdc:	14 c0       	rjmp	.+40     	; 0x1c06 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bde:	6d 89       	ldd	r22, Y+21	; 0x15
    1be0:	7e 89       	ldd	r23, Y+22	; 0x16
    1be2:	8f 89       	ldd	r24, Y+23	; 0x17
    1be4:	98 8d       	ldd	r25, Y+24	; 0x18
    1be6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	9c 8b       	std	Y+20, r25	; 0x14
    1bf0:	8b 8b       	std	Y+19, r24	; 0x13
    1bf2:	8b 89       	ldd	r24, Y+19	; 0x13
    1bf4:	9c 89       	ldd	r25, Y+20	; 0x14
    1bf6:	98 8b       	std	Y+16, r25	; 0x10
    1bf8:	8f 87       	std	Y+15, r24	; 0x0f
    1bfa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bfc:	98 89       	ldd	r25, Y+16	; 0x10
    1bfe:	01 97       	sbiw	r24, 0x01	; 1
    1c00:	f1 f7       	brne	.-4      	; 0x1bfe <LCD_displayCharacter+0x2d6>
    1c02:	98 8b       	std	Y+16, r25	; 0x10
    1c04:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	61 e0       	ldi	r22, 0x01	; 1
    1c0a:	40 e0       	ldi	r20, 0x00	; 0
    1c0c:	0e 94 b0 07 	call	0xf60	; 0xf60 <GPIO_writePin>
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	a0 e8       	ldi	r26, 0x80	; 128
    1c16:	bf e3       	ldi	r27, 0x3F	; 63
    1c18:	8b 87       	std	Y+11, r24	; 0x0b
    1c1a:	9c 87       	std	Y+12, r25	; 0x0c
    1c1c:	ad 87       	std	Y+13, r26	; 0x0d
    1c1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c20:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c22:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c24:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c26:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	4a e7       	ldi	r20, 0x7A	; 122
    1c2e:	55 e4       	ldi	r21, 0x45	; 69
    1c30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	8f 83       	std	Y+7, r24	; 0x07
    1c3a:	98 87       	std	Y+8, r25	; 0x08
    1c3c:	a9 87       	std	Y+9, r26	; 0x09
    1c3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c40:	6f 81       	ldd	r22, Y+7	; 0x07
    1c42:	78 85       	ldd	r23, Y+8	; 0x08
    1c44:	89 85       	ldd	r24, Y+9	; 0x09
    1c46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	40 e8       	ldi	r20, 0x80	; 128
    1c4e:	5f e3       	ldi	r21, 0x3F	; 63
    1c50:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c54:	88 23       	and	r24, r24
    1c56:	2c f4       	brge	.+10     	; 0x1c62 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	9e 83       	std	Y+6, r25	; 0x06
    1c5e:	8d 83       	std	Y+5, r24	; 0x05
    1c60:	3f c0       	rjmp	.+126    	; 0x1ce0 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1c62:	6f 81       	ldd	r22, Y+7	; 0x07
    1c64:	78 85       	ldd	r23, Y+8	; 0x08
    1c66:	89 85       	ldd	r24, Y+9	; 0x09
    1c68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	3f ef       	ldi	r19, 0xFF	; 255
    1c6e:	4f e7       	ldi	r20, 0x7F	; 127
    1c70:	57 e4       	ldi	r21, 0x47	; 71
    1c72:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c76:	18 16       	cp	r1, r24
    1c78:	4c f5       	brge	.+82     	; 0x1ccc <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	40 e2       	ldi	r20, 0x20	; 32
    1c88:	51 e4       	ldi	r21, 0x41	; 65
    1c8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c8e:	dc 01       	movw	r26, r24
    1c90:	cb 01       	movw	r24, r22
    1c92:	bc 01       	movw	r22, r24
    1c94:	cd 01       	movw	r24, r26
    1c96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	9e 83       	std	Y+6, r25	; 0x06
    1ca0:	8d 83       	std	Y+5, r24	; 0x05
    1ca2:	0f c0       	rjmp	.+30     	; 0x1cc2 <LCD_displayCharacter+0x39a>
    1ca4:	80 e9       	ldi	r24, 0x90	; 144
    1ca6:	91 e0       	ldi	r25, 0x01	; 1
    1ca8:	9c 83       	std	Y+4, r25	; 0x04
    1caa:	8b 83       	std	Y+3, r24	; 0x03
    1cac:	8b 81       	ldd	r24, Y+3	; 0x03
    1cae:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb0:	01 97       	sbiw	r24, 0x01	; 1
    1cb2:	f1 f7       	brne	.-4      	; 0x1cb0 <LCD_displayCharacter+0x388>
    1cb4:	9c 83       	std	Y+4, r25	; 0x04
    1cb6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cba:	9e 81       	ldd	r25, Y+6	; 0x06
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	9e 83       	std	Y+6, r25	; 0x06
    1cc0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc6:	00 97       	sbiw	r24, 0x00	; 0
    1cc8:	69 f7       	brne	.-38     	; 0x1ca4 <LCD_displayCharacter+0x37c>
    1cca:	14 c0       	rjmp	.+40     	; 0x1cf4 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ccc:	6f 81       	ldd	r22, Y+7	; 0x07
    1cce:	78 85       	ldd	r23, Y+8	; 0x08
    1cd0:	89 85       	ldd	r24, Y+9	; 0x09
    1cd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	9e 83       	std	Y+6, r25	; 0x06
    1cde:	8d 83       	std	Y+5, r24	; 0x05
    1ce0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce4:	9a 83       	std	Y+2, r25	; 0x02
    1ce6:	89 83       	std	Y+1, r24	; 0x01
    1ce8:	89 81       	ldd	r24, Y+1	; 0x01
    1cea:	9a 81       	ldd	r25, Y+2	; 0x02
    1cec:	01 97       	sbiw	r24, 0x01	; 1
    1cee:	f1 f7       	brne	.-4      	; 0x1cec <LCD_displayCharacter+0x3c4>
    1cf0:	9a 83       	std	Y+2, r25	; 0x02
    1cf2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1cf4:	e9 96       	adiw	r28, 0x39	; 57
    1cf6:	0f b6       	in	r0, 0x3f	; 63
    1cf8:	f8 94       	cli
    1cfa:	de bf       	out	0x3e, r29	; 62
    1cfc:	0f be       	out	0x3f, r0	; 63
    1cfe:	cd bf       	out	0x3d, r28	; 61
    1d00:	cf 91       	pop	r28
    1d02:	df 91       	pop	r29
    1d04:	08 95       	ret

00001d06 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *a_str)
{
    1d06:	df 93       	push	r29
    1d08:	cf 93       	push	r28
    1d0a:	00 d0       	rcall	.+0      	; 0x1d0c <LCD_displayString+0x6>
    1d0c:	0f 92       	push	r0
    1d0e:	cd b7       	in	r28, 0x3d	; 61
    1d10:	de b7       	in	r29, 0x3e	; 62
    1d12:	9b 83       	std	Y+3, r25	; 0x03
    1d14:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1d16:	19 82       	std	Y+1, r1	; 0x01
    1d18:	0e c0       	rjmp	.+28     	; 0x1d36 <LCD_displayString+0x30>
	while (a_str[i] != '\0')
	{
		LCD_displayCharacter(a_str[i]);
    1d1a:	89 81       	ldd	r24, Y+1	; 0x01
    1d1c:	28 2f       	mov	r18, r24
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	8a 81       	ldd	r24, Y+2	; 0x02
    1d22:	9b 81       	ldd	r25, Y+3	; 0x03
    1d24:	fc 01       	movw	r30, r24
    1d26:	e2 0f       	add	r30, r18
    1d28:	f3 1f       	adc	r31, r19
    1d2a:	80 81       	ld	r24, Z
    1d2c:	0e 94 94 0c 	call	0x1928	; 0x1928 <LCD_displayCharacter>
		i++;
    1d30:	89 81       	ldd	r24, Y+1	; 0x01
    1d32:	8f 5f       	subi	r24, 0xFF	; 255
    1d34:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *a_str)
{
	uint8 i = 0;
	while (a_str[i] != '\0')
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	28 2f       	mov	r18, r24
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d40:	fc 01       	movw	r30, r24
    1d42:	e2 0f       	add	r30, r18
    1d44:	f3 1f       	adc	r31, r19
    1d46:	80 81       	ld	r24, Z
    1d48:	88 23       	and	r24, r24
    1d4a:	39 f7       	brne	.-50     	; 0x1d1a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(a_str[i]);
		i++;
	}
}
    1d4c:	0f 90       	pop	r0
    1d4e:	0f 90       	pop	r0
    1d50:	0f 90       	pop	r0
    1d52:	cf 91       	pop	r28
    1d54:	df 91       	pop	r29
    1d56:	08 95       	ret

00001d58 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 a_row, uint8 a_col)
{
    1d58:	df 93       	push	r29
    1d5a:	cf 93       	push	r28
    1d5c:	00 d0       	rcall	.+0      	; 0x1d5e <LCD_moveCursor+0x6>
    1d5e:	00 d0       	rcall	.+0      	; 0x1d60 <LCD_moveCursor+0x8>
    1d60:	0f 92       	push	r0
    1d62:	cd b7       	in	r28, 0x3d	; 61
    1d64:	de b7       	in	r29, 0x3e	; 62
    1d66:	8a 83       	std	Y+2, r24	; 0x02
    1d68:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch (a_row)
    1d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6c:	28 2f       	mov	r18, r24
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	3d 83       	std	Y+5, r19	; 0x05
    1d72:	2c 83       	std	Y+4, r18	; 0x04
    1d74:	8c 81       	ldd	r24, Y+4	; 0x04
    1d76:	9d 81       	ldd	r25, Y+5	; 0x05
    1d78:	81 30       	cpi	r24, 0x01	; 1
    1d7a:	91 05       	cpc	r25, r1
    1d7c:	c1 f0       	breq	.+48     	; 0x1dae <LCD_moveCursor+0x56>
    1d7e:	2c 81       	ldd	r18, Y+4	; 0x04
    1d80:	3d 81       	ldd	r19, Y+5	; 0x05
    1d82:	22 30       	cpi	r18, 0x02	; 2
    1d84:	31 05       	cpc	r19, r1
    1d86:	2c f4       	brge	.+10     	; 0x1d92 <LCD_moveCursor+0x3a>
    1d88:	8c 81       	ldd	r24, Y+4	; 0x04
    1d8a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d8c:	00 97       	sbiw	r24, 0x00	; 0
    1d8e:	61 f0       	breq	.+24     	; 0x1da8 <LCD_moveCursor+0x50>
    1d90:	19 c0       	rjmp	.+50     	; 0x1dc4 <LCD_moveCursor+0x6c>
    1d92:	2c 81       	ldd	r18, Y+4	; 0x04
    1d94:	3d 81       	ldd	r19, Y+5	; 0x05
    1d96:	22 30       	cpi	r18, 0x02	; 2
    1d98:	31 05       	cpc	r19, r1
    1d9a:	69 f0       	breq	.+26     	; 0x1db6 <LCD_moveCursor+0x5e>
    1d9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1da0:	83 30       	cpi	r24, 0x03	; 3
    1da2:	91 05       	cpc	r25, r1
    1da4:	61 f0       	breq	.+24     	; 0x1dbe <LCD_moveCursor+0x66>
    1da6:	0e c0       	rjmp	.+28     	; 0x1dc4 <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address = a_col;
    1da8:	8b 81       	ldd	r24, Y+3	; 0x03
    1daa:	89 83       	std	Y+1, r24	; 0x01
    1dac:	0b c0       	rjmp	.+22     	; 0x1dc4 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address = a_col + 0x40;
    1dae:	8b 81       	ldd	r24, Y+3	; 0x03
    1db0:	80 5c       	subi	r24, 0xC0	; 192
    1db2:	89 83       	std	Y+1, r24	; 0x01
    1db4:	07 c0       	rjmp	.+14     	; 0x1dc4 <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address = a_col + 0x10;
    1db6:	8b 81       	ldd	r24, Y+3	; 0x03
    1db8:	80 5f       	subi	r24, 0xF0	; 240
    1dba:	89 83       	std	Y+1, r24	; 0x01
    1dbc:	03 c0       	rjmp	.+6      	; 0x1dc4 <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address = a_col + 0x50;
    1dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc0:	80 5b       	subi	r24, 0xB0	; 176
    1dc2:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1dc4:	89 81       	ldd	r24, Y+1	; 0x01
    1dc6:	80 68       	ori	r24, 0x80	; 128
    1dc8:	0e 94 a5 0a 	call	0x154a	; 0x154a <LCD_sendCommand>
}
    1dcc:	0f 90       	pop	r0
    1dce:	0f 90       	pop	r0
    1dd0:	0f 90       	pop	r0
    1dd2:	0f 90       	pop	r0
    1dd4:	0f 90       	pop	r0
    1dd6:	cf 91       	pop	r28
    1dd8:	df 91       	pop	r29
    1dda:	08 95       	ret

00001ddc <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 a_row, uint8 col, const char *a_str)
{
    1ddc:	df 93       	push	r29
    1dde:	cf 93       	push	r28
    1de0:	00 d0       	rcall	.+0      	; 0x1de2 <LCD_displayStringRowColumn+0x6>
    1de2:	00 d0       	rcall	.+0      	; 0x1de4 <LCD_displayStringRowColumn+0x8>
    1de4:	cd b7       	in	r28, 0x3d	; 61
    1de6:	de b7       	in	r29, 0x3e	; 62
    1de8:	89 83       	std	Y+1, r24	; 0x01
    1dea:	6a 83       	std	Y+2, r22	; 0x02
    1dec:	5c 83       	std	Y+4, r21	; 0x04
    1dee:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(a_row, col); /* go to to the required LCD position */
    1df0:	89 81       	ldd	r24, Y+1	; 0x01
    1df2:	6a 81       	ldd	r22, Y+2	; 0x02
    1df4:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <LCD_moveCursor>
	LCD_displayString(a_str); /* display the string */
    1df8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1dfc:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <LCD_displayString>
}
    1e00:	0f 90       	pop	r0
    1e02:	0f 90       	pop	r0
    1e04:	0f 90       	pop	r0
    1e06:	0f 90       	pop	r0
    1e08:	cf 91       	pop	r28
    1e0a:	df 91       	pop	r29
    1e0c:	08 95       	ret

00001e0e <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int a_data)
{
    1e0e:	df 93       	push	r29
    1e10:	cf 93       	push	r28
    1e12:	cd b7       	in	r28, 0x3d	; 61
    1e14:	de b7       	in	r29, 0x3e	; 62
    1e16:	62 97       	sbiw	r28, 0x12	; 18
    1e18:	0f b6       	in	r0, 0x3f	; 63
    1e1a:	f8 94       	cli
    1e1c:	de bf       	out	0x3e, r29	; 62
    1e1e:	0f be       	out	0x3f, r0	; 63
    1e20:	cd bf       	out	0x3d, r28	; 61
    1e22:	9a 8b       	std	Y+18, r25	; 0x12
    1e24:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ascii result */
	itoa(a_data, buff, 10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1e26:	89 89       	ldd	r24, Y+17	; 0x11
    1e28:	9a 89       	ldd	r25, Y+18	; 0x12
    1e2a:	9e 01       	movw	r18, r28
    1e2c:	2f 5f       	subi	r18, 0xFF	; 255
    1e2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e30:	b9 01       	movw	r22, r18
    1e32:	4a e0       	ldi	r20, 0x0A	; 10
    1e34:	50 e0       	ldi	r21, 0x00	; 0
    1e36:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <itoa>
	LCD_displayString(buff); /* Display the string */
    1e3a:	ce 01       	movw	r24, r28
    1e3c:	01 96       	adiw	r24, 0x01	; 1
    1e3e:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <LCD_displayString>
}
    1e42:	62 96       	adiw	r28, 0x12	; 18
    1e44:	0f b6       	in	r0, 0x3f	; 63
    1e46:	f8 94       	cli
    1e48:	de bf       	out	0x3e, r29	; 62
    1e4a:	0f be       	out	0x3f, r0	; 63
    1e4c:	cd bf       	out	0x3d, r28	; 61
    1e4e:	cf 91       	pop	r28
    1e50:	df 91       	pop	r29
    1e52:	08 95       	ret

00001e54 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    1e54:	df 93       	push	r29
    1e56:	cf 93       	push	r28
    1e58:	cd b7       	in	r28, 0x3d	; 61
    1e5a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	0e 94 a5 0a 	call	0x154a	; 0x154a <LCD_sendCommand>
}
    1e62:	cf 91       	pop	r28
    1e64:	df 91       	pop	r29
    1e66:	08 95       	ret

00001e68 <main>:
#include "MCAL/UART/uart.h" /* To use UART functions */

#define READY_TO_RECIEVE	0x69

int main(void)
{
    1e68:	df 93       	push	r29
    1e6a:	cf 93       	push	r28
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62
    1e70:	2f 97       	sbiw	r28, 0x0f	; 15
    1e72:	0f b6       	in	r0, 0x3f	; 63
    1e74:	f8 94       	cli
    1e76:	de bf       	out	0x3e, r29	; 62
    1e78:	0f be       	out	0x3f, r0	; 63
    1e7a:	cd bf       	out	0x3d, r28	; 61
	/* Configuration and initialization functions */
	uint16 distance = 0;
    1e7c:	1a 82       	std	Y+2, r1	; 0x02
    1e7e:	19 82       	std	Y+1, r1	; 0x01
	/* select the configuration of UART */
	UART_ConfigType UART_config =
	{ ASYNCHRONOUS, DISABLED_PARITY, STOP_1_BIT, DATA_8_BIT, BAUD_RATE_9600 };
    1e80:	ce 01       	movw	r24, r28
    1e82:	03 96       	adiw	r24, 0x03	; 3
    1e84:	9c 87       	std	Y+12, r25	; 0x0c
    1e86:	8b 87       	std	Y+11, r24	; 0x0b
    1e88:	eb e7       	ldi	r30, 0x7B	; 123
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	fe 87       	std	Y+14, r31	; 0x0e
    1e8e:	ed 87       	std	Y+13, r30	; 0x0d
    1e90:	f8 e0       	ldi	r31, 0x08	; 8
    1e92:	ff 87       	std	Y+15, r31	; 0x0f
    1e94:	ed 85       	ldd	r30, Y+13	; 0x0d
    1e96:	fe 85       	ldd	r31, Y+14	; 0x0e
    1e98:	00 80       	ld	r0, Z
    1e9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e9e:	01 96       	adiw	r24, 0x01	; 1
    1ea0:	9e 87       	std	Y+14, r25	; 0x0e
    1ea2:	8d 87       	std	Y+13, r24	; 0x0d
    1ea4:	eb 85       	ldd	r30, Y+11	; 0x0b
    1ea6:	fc 85       	ldd	r31, Y+12	; 0x0c
    1ea8:	00 82       	st	Z, r0
    1eaa:	8b 85       	ldd	r24, Y+11	; 0x0b
    1eac:	9c 85       	ldd	r25, Y+12	; 0x0c
    1eae:	01 96       	adiw	r24, 0x01	; 1
    1eb0:	9c 87       	std	Y+12, r25	; 0x0c
    1eb2:	8b 87       	std	Y+11, r24	; 0x0b
    1eb4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1eb6:	91 50       	subi	r25, 0x01	; 1
    1eb8:	9f 87       	std	Y+15, r25	; 0x0f
    1eba:	ef 85       	ldd	r30, Y+15	; 0x0f
    1ebc:	ee 23       	and	r30, r30
    1ebe:	51 f7       	brne	.-44     	; 0x1e94 <main+0x2c>

	/* passing the configuration to initialization function of UART */
	UART_init(&UART_config);
    1ec0:	ce 01       	movw	r24, r28
    1ec2:	03 96       	adiw	r24, 0x03	; 3
    1ec4:	0e 94 9b 05 	call	0xb36	; 0xb36 <UART_init>
	LCD_init();
    1ec8:	0e 94 09 0a 	call	0x1412	; 0x1412 <LCD_init>
	LCD_displayString("Distance=    cm");
    1ecc:	80 e6       	ldi	r24, 0x60	; 96
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <LCD_displayString>
	UART_sendByte(READY_TO_RECIEVE);
    1ed4:	89 e6       	ldi	r24, 0x69	; 105
    1ed6:	0e 94 35 06 	call	0xc6a	; 0xc6a <UART_sendByte>
	while (1)
	{
		distance = UART_recieveByte();
    1eda:	0e 94 49 06 	call	0xc92	; 0xc92 <UART_recieveByte>
    1ede:	88 2f       	mov	r24, r24
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	9a 83       	std	Y+2, r25	; 0x02
    1ee4:	89 83       	std	Y+1, r24	; 0x01
		LCD_moveCursor(0, 10);
    1ee6:	80 e0       	ldi	r24, 0x00	; 0
    1ee8:	6a e0       	ldi	r22, 0x0A	; 10
    1eea:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <LCD_moveCursor>
		/* To ensure that the third digit in numbers less than 100 is not printed */
		LCD_intgerToString(distance);
    1eee:	89 81       	ldd	r24, Y+1	; 0x01
    1ef0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef2:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <LCD_intgerToString>
		if (distance < 100)
    1ef6:	89 81       	ldd	r24, Y+1	; 0x01
    1ef8:	9a 81       	ldd	r25, Y+2	; 0x02
    1efa:	84 36       	cpi	r24, 0x64	; 100
    1efc:	91 05       	cpc	r25, r1
    1efe:	20 f4       	brcc	.+8      	; 0x1f08 <main+0xa0>
		{
			LCD_displayCharacter(' ');
    1f00:	80 e2       	ldi	r24, 0x20	; 32
    1f02:	0e 94 94 0c 	call	0x1928	; 0x1928 <LCD_displayCharacter>
    1f06:	e9 cf       	rjmp	.-46     	; 0x1eda <main+0x72>
		}
		/* To ensure that the second digit in numbers less than 10 is not printed */
		else if (distance < 10)
    1f08:	89 81       	ldd	r24, Y+1	; 0x01
    1f0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f0c:	8a 30       	cpi	r24, 0x0A	; 10
    1f0e:	91 05       	cpc	r25, r1
    1f10:	20 f7       	brcc	.-56     	; 0x1eda <main+0x72>
		{
			LCD_displayString("  ");
    1f12:	80 e7       	ldi	r24, 0x70	; 112
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <LCD_displayString>
    1f1a:	df cf       	rjmp	.-66     	; 0x1eda <main+0x72>

00001f1c <__udivmodsi4>:
    1f1c:	a1 e2       	ldi	r26, 0x21	; 33
    1f1e:	1a 2e       	mov	r1, r26
    1f20:	aa 1b       	sub	r26, r26
    1f22:	bb 1b       	sub	r27, r27
    1f24:	fd 01       	movw	r30, r26
    1f26:	0d c0       	rjmp	.+26     	; 0x1f42 <__udivmodsi4_ep>

00001f28 <__udivmodsi4_loop>:
    1f28:	aa 1f       	adc	r26, r26
    1f2a:	bb 1f       	adc	r27, r27
    1f2c:	ee 1f       	adc	r30, r30
    1f2e:	ff 1f       	adc	r31, r31
    1f30:	a2 17       	cp	r26, r18
    1f32:	b3 07       	cpc	r27, r19
    1f34:	e4 07       	cpc	r30, r20
    1f36:	f5 07       	cpc	r31, r21
    1f38:	20 f0       	brcs	.+8      	; 0x1f42 <__udivmodsi4_ep>
    1f3a:	a2 1b       	sub	r26, r18
    1f3c:	b3 0b       	sbc	r27, r19
    1f3e:	e4 0b       	sbc	r30, r20
    1f40:	f5 0b       	sbc	r31, r21

00001f42 <__udivmodsi4_ep>:
    1f42:	66 1f       	adc	r22, r22
    1f44:	77 1f       	adc	r23, r23
    1f46:	88 1f       	adc	r24, r24
    1f48:	99 1f       	adc	r25, r25
    1f4a:	1a 94       	dec	r1
    1f4c:	69 f7       	brne	.-38     	; 0x1f28 <__udivmodsi4_loop>
    1f4e:	60 95       	com	r22
    1f50:	70 95       	com	r23
    1f52:	80 95       	com	r24
    1f54:	90 95       	com	r25
    1f56:	9b 01       	movw	r18, r22
    1f58:	ac 01       	movw	r20, r24
    1f5a:	bd 01       	movw	r22, r26
    1f5c:	cf 01       	movw	r24, r30
    1f5e:	08 95       	ret

00001f60 <__prologue_saves__>:
    1f60:	2f 92       	push	r2
    1f62:	3f 92       	push	r3
    1f64:	4f 92       	push	r4
    1f66:	5f 92       	push	r5
    1f68:	6f 92       	push	r6
    1f6a:	7f 92       	push	r7
    1f6c:	8f 92       	push	r8
    1f6e:	9f 92       	push	r9
    1f70:	af 92       	push	r10
    1f72:	bf 92       	push	r11
    1f74:	cf 92       	push	r12
    1f76:	df 92       	push	r13
    1f78:	ef 92       	push	r14
    1f7a:	ff 92       	push	r15
    1f7c:	0f 93       	push	r16
    1f7e:	1f 93       	push	r17
    1f80:	cf 93       	push	r28
    1f82:	df 93       	push	r29
    1f84:	cd b7       	in	r28, 0x3d	; 61
    1f86:	de b7       	in	r29, 0x3e	; 62
    1f88:	ca 1b       	sub	r28, r26
    1f8a:	db 0b       	sbc	r29, r27
    1f8c:	0f b6       	in	r0, 0x3f	; 63
    1f8e:	f8 94       	cli
    1f90:	de bf       	out	0x3e, r29	; 62
    1f92:	0f be       	out	0x3f, r0	; 63
    1f94:	cd bf       	out	0x3d, r28	; 61
    1f96:	09 94       	ijmp

00001f98 <__epilogue_restores__>:
    1f98:	2a 88       	ldd	r2, Y+18	; 0x12
    1f9a:	39 88       	ldd	r3, Y+17	; 0x11
    1f9c:	48 88       	ldd	r4, Y+16	; 0x10
    1f9e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1fa0:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fa2:	7d 84       	ldd	r7, Y+13	; 0x0d
    1fa4:	8c 84       	ldd	r8, Y+12	; 0x0c
    1fa6:	9b 84       	ldd	r9, Y+11	; 0x0b
    1fa8:	aa 84       	ldd	r10, Y+10	; 0x0a
    1faa:	b9 84       	ldd	r11, Y+9	; 0x09
    1fac:	c8 84       	ldd	r12, Y+8	; 0x08
    1fae:	df 80       	ldd	r13, Y+7	; 0x07
    1fb0:	ee 80       	ldd	r14, Y+6	; 0x06
    1fb2:	fd 80       	ldd	r15, Y+5	; 0x05
    1fb4:	0c 81       	ldd	r16, Y+4	; 0x04
    1fb6:	1b 81       	ldd	r17, Y+3	; 0x03
    1fb8:	aa 81       	ldd	r26, Y+2	; 0x02
    1fba:	b9 81       	ldd	r27, Y+1	; 0x01
    1fbc:	ce 0f       	add	r28, r30
    1fbe:	d1 1d       	adc	r29, r1
    1fc0:	0f b6       	in	r0, 0x3f	; 63
    1fc2:	f8 94       	cli
    1fc4:	de bf       	out	0x3e, r29	; 62
    1fc6:	0f be       	out	0x3f, r0	; 63
    1fc8:	cd bf       	out	0x3d, r28	; 61
    1fca:	ed 01       	movw	r28, r26
    1fcc:	08 95       	ret

00001fce <itoa>:
    1fce:	fb 01       	movw	r30, r22
    1fd0:	9f 01       	movw	r18, r30
    1fd2:	e8 94       	clt
    1fd4:	42 30       	cpi	r20, 0x02	; 2
    1fd6:	c4 f0       	brlt	.+48     	; 0x2008 <itoa+0x3a>
    1fd8:	45 32       	cpi	r20, 0x25	; 37
    1fda:	b4 f4       	brge	.+44     	; 0x2008 <itoa+0x3a>
    1fdc:	4a 30       	cpi	r20, 0x0A	; 10
    1fde:	29 f4       	brne	.+10     	; 0x1fea <itoa+0x1c>
    1fe0:	97 fb       	bst	r25, 7
    1fe2:	1e f4       	brtc	.+6      	; 0x1fea <itoa+0x1c>
    1fe4:	90 95       	com	r25
    1fe6:	81 95       	neg	r24
    1fe8:	9f 4f       	sbci	r25, 0xFF	; 255
    1fea:	64 2f       	mov	r22, r20
    1fec:	77 27       	eor	r23, r23
    1fee:	0e 94 18 10 	call	0x2030	; 0x2030 <__udivmodhi4>
    1ff2:	80 5d       	subi	r24, 0xD0	; 208
    1ff4:	8a 33       	cpi	r24, 0x3A	; 58
    1ff6:	0c f0       	brlt	.+2      	; 0x1ffa <itoa+0x2c>
    1ff8:	89 5d       	subi	r24, 0xD9	; 217
    1ffa:	81 93       	st	Z+, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	00 97       	sbiw	r24, 0x00	; 0
    2000:	a1 f7       	brne	.-24     	; 0x1fea <itoa+0x1c>
    2002:	16 f4       	brtc	.+4      	; 0x2008 <itoa+0x3a>
    2004:	5d e2       	ldi	r21, 0x2D	; 45
    2006:	51 93       	st	Z+, r21
    2008:	10 82       	st	Z, r1
    200a:	c9 01       	movw	r24, r18
    200c:	0c 94 08 10 	jmp	0x2010	; 0x2010 <strrev>

00002010 <strrev>:
    2010:	dc 01       	movw	r26, r24
    2012:	fc 01       	movw	r30, r24
    2014:	67 2f       	mov	r22, r23
    2016:	71 91       	ld	r23, Z+
    2018:	77 23       	and	r23, r23
    201a:	e1 f7       	brne	.-8      	; 0x2014 <strrev+0x4>
    201c:	32 97       	sbiw	r30, 0x02	; 2
    201e:	04 c0       	rjmp	.+8      	; 0x2028 <strrev+0x18>
    2020:	7c 91       	ld	r23, X
    2022:	6d 93       	st	X+, r22
    2024:	70 83       	st	Z, r23
    2026:	62 91       	ld	r22, -Z
    2028:	ae 17       	cp	r26, r30
    202a:	bf 07       	cpc	r27, r31
    202c:	c8 f3       	brcs	.-14     	; 0x2020 <strrev+0x10>
    202e:	08 95       	ret

00002030 <__udivmodhi4>:
    2030:	aa 1b       	sub	r26, r26
    2032:	bb 1b       	sub	r27, r27
    2034:	51 e1       	ldi	r21, 0x11	; 17
    2036:	07 c0       	rjmp	.+14     	; 0x2046 <__udivmodhi4_ep>

00002038 <__udivmodhi4_loop>:
    2038:	aa 1f       	adc	r26, r26
    203a:	bb 1f       	adc	r27, r27
    203c:	a6 17       	cp	r26, r22
    203e:	b7 07       	cpc	r27, r23
    2040:	10 f0       	brcs	.+4      	; 0x2046 <__udivmodhi4_ep>
    2042:	a6 1b       	sub	r26, r22
    2044:	b7 0b       	sbc	r27, r23

00002046 <__udivmodhi4_ep>:
    2046:	88 1f       	adc	r24, r24
    2048:	99 1f       	adc	r25, r25
    204a:	5a 95       	dec	r21
    204c:	a9 f7       	brne	.-22     	; 0x2038 <__udivmodhi4_loop>
    204e:	80 95       	com	r24
    2050:	90 95       	com	r25
    2052:	bc 01       	movw	r22, r24
    2054:	cd 01       	movw	r24, r26
    2056:	08 95       	ret

00002058 <_exit>:
    2058:	f8 94       	cli

0000205a <__stop_program>:
    205a:	ff cf       	rjmp	.-2      	; 0x205a <__stop_program>
